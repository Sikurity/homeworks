; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\Develop\HW\leeysos\process.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_bIsUsrProcessDead:DWORD
COMM	_gTestNum:DWORD:03H
COMM	_thread_name:DWORD:040H
COMM	_usr_thr_name:DWORD:03H
_DATA	ENDS
PUBLIC	??_C@_0M@EJHJBINM@USER_T_LOW_?$AA@		; `string'
PUBLIC	??_C@_0M@EPBCHDJJ@USER_T_MID_?$AA@		; `string'
PUBLIC	_PsSetThreadStatus
PUBLIC	??_C@_0M@IADHMGCG@USER_T_HIGH?$AA@		; `string'
PUBLIC	_PsCreateThread
PUBLIC	_PsCreateProcess
PUBLIC	_PspCreateUserProcess
;	COMDAT ??_C@_0M@EJHJBINM@USER_T_LOW_?$AA@
; File c:\develop\hw\leeysos\process.c
CONST	SEGMENT
??_C@_0M@EJHJBINM@USER_T_LOW_?$AA@ DB 'USER_T_LOW_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPBCHDJJ@USER_T_MID_?$AA@
CONST	SEGMENT
??_C@_0M@EPBCHDJJ@USER_T_MID_?$AA@ DB 'USER_T_MID_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IADHMGCG@USER_T_HIGH?$AA@
CONST	SEGMENT
??_C@_0M@IADHMGCG@USER_T_HIGH?$AA@ DB 'USER_T_HIGH', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _PspCreateUserProcess
_TEXT	SEGMENT
_test_handle$ = -16					; size = 12
_process_handle$ = -4					; size = 4
_PspCreateUserProcess PROC				; COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 164  : 	HANDLE process_handle;
; 165  : 	HANDLE test_handle[3];
; 166  : 
; 167  : 	//유저 프로세스를 생성해주는 PSCreateProcess 함수 호출
; 168  : 	if(!PsCreateProcess(&process_handle)) 

  00009	8d 45 fc	 lea	 eax, DWORD PTR _process_handle$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _PsCreateProcess
  00012	83 c4 04	 add	 esp, 4
  00015	85 c0		 test	 eax, eax
  00017	75 07		 jne	 SHORT $LN4@PspCreateU

; 169  : 		return FALSE;

  00019	33 c0		 xor	 eax, eax
  0001b	e9 dd 00 00 00	 jmp	 $LN5@PspCreateU
$LN4@PspCreateU:

; 170  : 
; 171  : 	// ☞ 테스트 HIGH 시스템 스레드 생성
; 172  : 	if( !PsCreateThread(&test_handle[0], process_handle, PspHighPriorityUserThread, NULL, DEFAULT_STACK_SIZE, TRUE, HIGH) )

  00020	6a 02		 push	 2
  00022	6a 01		 push	 1
  00024	68 00 00 01 00	 push	 65536			; 00010000H
  00029	6a 00		 push	 0
  0002b	68 00 00 00 00	 push	 OFFSET _PspHighPriorityUserThread
  00030	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00033	50		 push	 eax
  00034	8d 4d f0	 lea	 ecx, DWORD PTR _test_handle$[ebp]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _PsCreateThread
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	85 c0		 test	 eax, eax
  00042	75 07		 jne	 SHORT $LN3@PspCreateU

; 173  : 		return FALSE;

  00044	33 c0		 xor	 eax, eax
  00046	e9 b2 00 00 00	 jmp	 $LN5@PspCreateU
$LN3@PspCreateU:

; 174  : 	thread_name[PsGetThreadPtr(test_handle[0])->thread_id] = "USER_T_HIGH";

  0004b	8b 45 f0	 mov	 eax, DWORD PTR _test_handle$[ebp]
  0004e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00051	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@IADHMGCG@USER_T_HIGH?$AA@

; 175  : 	PsSetThreadStatus(test_handle[0], THREAD_STATUS_READY);

  0005c	6a 02		 push	 2
  0005e	8b 45 f0	 mov	 eax, DWORD PTR _test_handle$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00067	83 c4 08	 add	 esp, 8

; 176  : 
; 177  : 	// ☞ 테스트 MID 시스템 스레드 생성
; 178  : 	if( !PsCreateThread(&test_handle[1], process_handle, PspMidPriorityUserThread, NULL, DEFAULT_STACK_SIZE, TRUE, MID) )

  0006a	6a 01		 push	 1
  0006c	6a 01		 push	 1
  0006e	68 00 00 01 00	 push	 65536			; 00010000H
  00073	6a 00		 push	 0
  00075	68 00 00 00 00	 push	 OFFSET _PspMidPriorityUserThread
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  0007d	50		 push	 eax
  0007e	8d 4d f4	 lea	 ecx, DWORD PTR _test_handle$[ebp+4]
  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 _PsCreateThread
  00087	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008a	85 c0		 test	 eax, eax
  0008c	75 04		 jne	 SHORT $LN2@PspCreateU

; 179  : 		return FALSE;

  0008e	33 c0		 xor	 eax, eax
  00090	eb 6b		 jmp	 SHORT $LN5@PspCreateU
$LN2@PspCreateU:

; 180  : 	thread_name[PsGetThreadPtr(test_handle[1])->thread_id] = "USER_T_MID_";

  00092	8b 45 f4	 mov	 eax, DWORD PTR _test_handle$[ebp+4]
  00095	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00098	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@EPBCHDJJ@USER_T_MID_?$AA@

; 181  : 	PsSetThreadStatus(test_handle[1], THREAD_STATUS_READY);

  000a3	6a 02		 push	 2
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _test_handle$[ebp+4]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _PsSetThreadStatus
  000ae	83 c4 08	 add	 esp, 8

; 182  : 
; 183  : 	// ☞ 테스트 LOW 시스템 스레드 생성
; 184  : 	if( !PsCreateThread(&test_handle[2], process_handle, PspLowPriorityUserThread, NULL, DEFAULT_STACK_SIZE, TRUE, LOW) )

  000b1	6a 00		 push	 0
  000b3	6a 01		 push	 1
  000b5	68 00 00 01 00	 push	 65536			; 00010000H
  000ba	6a 00		 push	 0
  000bc	68 00 00 00 00	 push	 OFFSET _PspLowPriorityUserThread
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  000c4	50		 push	 eax
  000c5	8d 4d f8	 lea	 ecx, DWORD PTR _test_handle$[ebp+8]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 _PsCreateThread
  000ce	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d1	85 c0		 test	 eax, eax
  000d3	75 04		 jne	 SHORT $LN1@PspCreateU

; 185  : 		return FALSE;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 24		 jmp	 SHORT $LN5@PspCreateU
$LN1@PspCreateU:

; 186  : 	thread_name[PsGetThreadPtr(test_handle[2])->thread_id] = "USER_T_LOW_";

  000d9	8b 45 f8	 mov	 eax, DWORD PTR _test_handle$[ebp+8]
  000dc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000df	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@EJHJBINM@USER_T_LOW_?$AA@

; 187  : 	PsSetThreadStatus(test_handle[2], THREAD_STATUS_READY);

  000ea	6a 02		 push	 2
  000ec	8b 45 f8	 mov	 eax, DWORD PTR _test_handle$[ebp+8]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _PsSetThreadStatus
  000f5	83 c4 08	 add	 esp, 8

; 188  : 
; 189  : 	return TRUE;

  000f8	b8 01 00 00 00	 mov	 eax, 1
$LN5@PspCreateU:

; 190  : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
_PspCreateUserProcess ENDP
_TEXT	ENDS
EXTRN	_HalTaskSwitch:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PspHighPriorityUserThread
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_PspHighPriorityUserThread PROC				; COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 	gTestNum[HIGH] = 0;

  00009	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gTestNum+8, 0
$LN2@PspHighPri:

; 132  : 
; 133  : 	while( ++gTestNum[HIGH] != 0xff )

  00013	a1 08 00 00 00	 mov	 eax, DWORD PTR _gTestNum+8
  00018	83 c0 01	 add	 eax, 1
  0001b	a3 08 00 00 00	 mov	 DWORD PTR _gTestNum+8, eax
  00020	81 3d 08 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR _gTestNum+8, 255 ; 000000ffH
  0002a	74 07		 je	 SHORT $LN1@PspHighPri

; 134  : 		HalTaskSwitch();

  0002c	e8 00 00 00 00	 call	 _HalTaskSwitch
  00031	eb e0		 jmp	 SHORT $LN2@PspHighPri
$LN1@PspHighPri:

; 135  : 
; 136  : 	return 0;

  00033	33 c0		 xor	 eax, eax

; 137  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_PspHighPriorityUserThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspMidPriorityUserThread
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_PspMidPriorityUserThread PROC				; COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 142  : 	gTestNum[MID] = 0;

  00009	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gTestNum+4, 0
$LN2@PspMidPrio:

; 143  : 
; 144  : 	while( ++gTestNum[MID] != 0xff )

  00013	a1 04 00 00 00	 mov	 eax, DWORD PTR _gTestNum+4
  00018	83 c0 01	 add	 eax, 1
  0001b	a3 04 00 00 00	 mov	 DWORD PTR _gTestNum+4, eax
  00020	81 3d 04 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR _gTestNum+4, 255 ; 000000ffH
  0002a	74 07		 je	 SHORT $LN1@PspMidPrio

; 145  : 		HalTaskSwitch();

  0002c	e8 00 00 00 00	 call	 _HalTaskSwitch
  00031	eb e0		 jmp	 SHORT $LN2@PspMidPrio
$LN1@PspMidPrio:

; 146  : 
; 147  : 	return 0;

  00033	33 c0		 xor	 eax, eax

; 148  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_PspMidPriorityUserThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspLowPriorityUserThread
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_PspLowPriorityUserThread PROC				; COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 153  : 	gTestNum[LOW] = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gTestNum, 0
$LN2@PspLowPrio:

; 154  : 
; 155  : 	while( ++gTestNum[LOW] != 0xff )

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _gTestNum
  00018	83 c0 01	 add	 eax, 1
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _gTestNum, eax
  00020	81 3d 00 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR _gTestNum, 255 ; 000000ffH
  0002a	74 07		 je	 SHORT $LN1@PspLowPrio

; 156  : 		HalTaskSwitch();

  0002c	e8 00 00 00 00	 call	 _HalTaskSwitch
  00031	eb e0		 jmp	 SHORT $LN2@PspLowPrio
$LN1@PspLowPrio:

; 157  : 
; 158  : 	return 0;

  00033	33 c0		 xor	 eax, eax

; 159  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_PspLowPriorityUserThread ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@ ; `string'
PUBLIC	??_C@_0L@ENOHOPEI@USR_HIGH_T?$AA@		; `string'
PUBLIC	??_C@_0L@JFLBNFBJ@USR_MID__T?$AA@		; `string'
PUBLIC	??_C@_0L@MCNPNAOC@USR_LOW__T?$AA@		; `string'
PUBLIC	_PskInitializeProcessManager
EXTRN	_CrtPrintf:PROC
_BSS	SEGMENT
_current_priority_num DD 01H DUP (?)
_m_TickCount DD	01H DUP (?)
_m_bShowTSWatchdogClock DD 01H DUP (?)
_m_ThreadCuttingList DB 07bH DUP (?)
	ALIGN	4

_m_ProcessCuttingList DB 07bH DUP (?)
	ALIGN	4

_m_ProcMgrBlk DB 01cH DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@
CONST	SEGMENT
??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@ DB 'PspCreate'
	DB	'SystemProcess() returned an error.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENOHOPEI@USR_HIGH_T?$AA@
CONST	SEGMENT
??_C@_0L@ENOHOPEI@USR_HIGH_T?$AA@ DB 'USR_HIGH_T', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFLBNFBJ@USR_MID__T?$AA@
CONST	SEGMENT
??_C@_0L@JFLBNFBJ@USR_MID__T?$AA@ DB 'USR_MID__T', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCNPNAOC@USR_LOW__T?$AA@
CONST	SEGMENT
??_C@_0L@MCNPNAOC@USR_LOW__T?$AA@ DB 'USR_LOW__T', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _PskInitializeProcessManager
_TEXT	SEGMENT
_PskInitializeProcessManager PROC			; COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 195  : 	m_ProcMgrBlk.process_count			= 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk, 0

; 196  : 	m_ProcMgrBlk.next_process_id		= 0;

  00013	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+4, 0

; 197  : 	m_ProcMgrBlk.pt_current_thread		= 0;

  0001d	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+8, 0

; 198  : 	m_ProcMgrBlk.pt_last_thread[LOW]	= NULL;

  00027	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+12, 0

; 199  : 	m_ProcMgrBlk.pt_last_thread[MID]	= NULL;

  00031	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+16, 0

; 200  : 	m_ProcMgrBlk.pt_last_thread[HIGH]	= NULL;

  0003b	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+20, 0

; 201  : 	m_ProcMgrBlk.pt_head_process		= NULL;

  00045	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+24, 0

; 202  : 
; 203  : 	m_ProcessCuttingList.count		= 0;

  0004f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _m_ProcessCuttingList, 0

; 204  : 	m_ProcessCuttingList.head		= 0;

  00056	c6 05 01 00 00
	00 00		 mov	 BYTE PTR _m_ProcessCuttingList+1, 0

; 205  : 	m_ProcessCuttingList.tail		= 0;

  0005d	c6 05 02 00 00
	00 00		 mov	 BYTE PTR _m_ProcessCuttingList+2, 0

; 206  : 
; 207  : 	m_ThreadCuttingList.count		= 0;

  00064	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _m_ThreadCuttingList, 0

; 208  : 	m_ThreadCuttingList.head		= 0;

  0006b	c6 05 01 00 00
	00 00		 mov	 BYTE PTR _m_ThreadCuttingList+1, 0

; 209  : 	m_ThreadCuttingList.tail		= 0;

  00072	c6 05 02 00 00
	00 00		 mov	 BYTE PTR _m_ThreadCuttingList+2, 0

; 210  : 
; 211  : 	m_bShowTSWatchdogClock			= TRUE;

  00079	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _m_bShowTSWatchdogClock, 1

; 212  : 	m_TickCount						= 0;

  00083	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_TickCount, 0

; 213  : 
; 214  : 	current_priority_num	= 0;		// ☞ 스레드 실행 우선순위의 기준이 되는 값을 0으로 초기화

  0008d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _current_priority_num, 0

; 215  : 	bIsUsrProcessDead		= 0;		// ☞ 유저 프로세스는 생성될 예정이므로, 0(살아있음)으로 초기화

  00097	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bIsUsrProcessDead, 0

; 216  : 
; 217  : 	usr_thr_name[LOW]	= "USR_LOW__T"; // ☞ 테스트용 유저 프로세스의 낮은 우선순위 스레드 이름 대입

  000a1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _usr_thr_name, OFFSET ??_C@_0L@MCNPNAOC@USR_LOW__T?$AA@

; 218  : 	usr_thr_name[MID]	= "USR_MID__T"; // ☞ 테스트용 유저 프로세스의 중간 우선순위 스레드 이름 대입

  000ab	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _usr_thr_name+4, OFFSET ??_C@_0L@JFLBNFBJ@USR_MID__T?$AA@

; 219  : 	usr_thr_name[HIGH]	= "USR_HIGH_T";	// ☞ 테스트용 유저 프로세스의 높은 우선순위 스레드 이름 대입

  000b5	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _usr_thr_name+8, OFFSET ??_C@_0L@ENOHOPEI@USR_HIGH_T?$AA@

; 220  : 
; 221  : 	gTestNum[LOW]	= 0;				// ☞ 테스트용 유저 프로세스의 높은 우선순위 스레드 실행횟수 0으로 초기화

  000bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gTestNum, 0

; 222  : 	gTestNum[MID]	= 0;				// ☞ 테스트용 유저 프로세스의 중간 우선순위 스레드 실행횟수 0으로 초기화

  000c9	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gTestNum+4, 0

; 223  : 	gTestNum[HIGH]	= 0;				// ☞ 테스트용 유저 프로세스의 낮은 우선순위 스레드 실행횟수 0으로 초기화

  000d3	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gTestNum+8, 0

; 224  : 
; 225  : 	if(!PspCreateSystemProcess()) 

  000dd	e8 00 00 00 00	 call	 _PspCreateSystemProcess
  000e2	85 c0		 test	 eax, eax
  000e4	75 11		 jne	 SHORT $LN1@PskInitial

; 226  : 	{
; 227  : 		DbgPrint("PspCreateSystemProcess() returned an error.\r\n");

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KFBIJEKH@PspCreateSystemProcess?$CI?$CJ?5returne@
  000eb	e8 00 00 00 00	 call	 _CrtPrintf
  000f0	83 c4 04	 add	 esp, 4

; 228  : 		return FALSE;

  000f3	33 c0		 xor	 eax, eax
  000f5	eb 05		 jmp	 SHORT $LN2@PskInitial
$LN1@PskInitial:

; 229  : 	}
; 230  : 
; 231  : 	return TRUE;

  000f7	b8 01 00 00 00	 mov	 eax, 1
$LN2@PskInitial:

; 232  : }

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
_PskInitializeProcessManager ENDP
_TEXT	ENDS
EXTRN	_MmAllocateNonCachedMemory:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PsCreateProcess
_TEXT	SEGMENT
_pProcess$ = -4						; size = 4
_ProcessHandle$ = 8					; size = 4
_PsCreateProcess PROC					; COMDAT

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 237  : 	PPROCESS_CONTROL_BLOCK pProcess;
; 238  : 
; 239  : 	pProcess = MmAllocateNonCachedMemory(sizeof(PROCESS_CONTROL_BLOCK));

  00009	6a 20		 push	 32			; 00000020H
  0000b	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 fc	 mov	 DWORD PTR _pProcess$[ebp], eax

; 240  : 	if(pProcess == NULL) return FALSE;

  00016	83 7d fc 00	 cmp	 DWORD PTR _pProcess$[ebp], 0
  0001a	75 04		 jne	 SHORT $LN2@PsCreatePr
  0001c	33 c0		 xor	 eax, eax
  0001e	eb 70		 jmp	 SHORT $LN3@PsCreatePr
$LN2@PsCreatePr:

; 241  : 
; 242  : 	pProcess->process_id		= PspGetNextProcessID();

  00020	e8 00 00 00 00	 call	 _PspGetNextProcessID
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _pProcess$[ebp]
  00028	89 01		 mov	 DWORD PTR [ecx], eax

; 243  : 	pProcess->process_handle	= (HANDLE)pProcess;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _pProcess$[ebp]
  00030	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 244  : 	pProcess->pt_next_process	= NULL;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00036	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 245  : 	pProcess->thread_count		= 0;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00040	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 246  : 	pProcess->next_thread_id	= 0;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  0004a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 247  : 	pProcess->pt_head_thread[LOW]	= NULL;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00054	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 248  : 	pProcess->pt_head_thread[MID]	= NULL;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  0005e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 249  : 	pProcess->pt_head_thread[HIGH]	= NULL;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00068	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 250  : 	
; 251  : 	if(!PspAddNewProcess((HANDLE)pProcess)) 

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _PspAddNewProcess
  00078	83 c4 04	 add	 esp, 4
  0007b	85 c0		 test	 eax, eax
  0007d	75 04		 jne	 SHORT $LN1@PsCreatePr

; 252  : 		return FALSE;

  0007f	33 c0		 xor	 eax, eax
  00081	eb 0d		 jmp	 SHORT $LN3@PsCreatePr
$LN1@PsCreatePr:

; 253  : 
; 254  : 	*ProcessHandle = pProcess;

  00083	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _pProcess$[ebp]
  00089	89 08		 mov	 DWORD PTR [eax], ecx

; 255  : 
; 256  : 	return TRUE;

  0008b	b8 01 00 00 00	 mov	 eax, 1
$LN3@PsCreatePr:

; 257  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_PsCreateProcess ENDP
_TEXT	ENDS
EXTRN	_HalSetupTSS:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PsCreateThread
_TEXT	SEGMENT
_pStack$ = -8						; size = 4
_pThread$ = -4						; size = 4
_ThreadHandle$ = 8					; size = 4
_ProcessHandle$ = 12					; size = 4
_StartRoutine$ = 16					; size = 4
_StartContext$ = 20					; size = 4
_StackSize$ = 24					; size = 4
_AutoDelete$ = 28					; size = 4
_Priority$ = 32						; size = 4
_PsCreateThread PROC					; COMDAT

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 264  : 	PTHREAD_CONTROL_BLOCK pThread;
; 265  : 	int *pStack;
; 266  : 	
; 267  : 	//메모리할당
; 268  : 	pThread = MmAllocateNonCachedMemory(sizeof(THREAD_CONTROL_BLOCK));

  00009	68 94 00 00 00	 push	 148			; 00000094H
  0000e	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 fc	 mov	 DWORD PTR _pThread$[ebp], eax

; 269  : 	if(pThread == NULL) return FALSE;

  00019	83 7d fc 00	 cmp	 DWORD PTR _pThread$[ebp], 0
  0001d	75 07		 jne	 SHORT $LN3@PsCreateTh
  0001f	33 c0		 xor	 eax, eax
  00021	e9 cf 00 00 00	 jmp	 $LN4@PsCreateTh
$LN3@PsCreateTh:

; 270  : 	//쓰레드에서 사용할 스택 할당
; 271  : 	pStack  = MmAllocateNonCachedMemory(StackSize);

  00026	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  0002f	83 c4 04	 add	 esp, 4
  00032	89 45 f8	 mov	 DWORD PTR _pStack$[ebp], eax

; 272  : 	if(pStack == NULL) return FALSE;

  00035	83 7d f8 00	 cmp	 DWORD PTR _pStack$[ebp], 0
  00039	75 07		 jne	 SHORT $LN2@PsCreateTh
  0003b	33 c0		 xor	 eax, eax
  0003d	e9 b3 00 00 00	 jmp	 $LN4@PsCreateTh
$LN2@PsCreateTh:

; 273  : 
; 274  : 	//부모 프로세스의 핸들 설정
; 275  : 	pThread->parent_process_handle		= ProcessHandle;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00048	89 08		 mov	 DWORD PTR [eax], ecx

; 276  : 	//Thread id 및 handle 할당
; 277  : 	pThread->thread_id					= PspGetNextThreadID(ProcessHandle);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _PspGetNextThreadID
  00053	83 c4 04	 add	 esp, 4
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00059	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 278  : 	pThread->thread_handle				= (HANDLE)pThread;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00062	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 279  : 	pThread->thread_status				= THREAD_STATUS_STOP;		// Thread 상태를 STOP으로 설정

  00065	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00068	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 280  : 	pThread->auto_delete				= AutoDelete; 

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00072	8b 4d 1c	 mov	 ecx, DWORD PTR _AutoDelete$[ebp]
  00075	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 281  : 	pThread->pt_next_thread				= NULL;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0007b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 282  : 
; 283  : 	//쓰레드가 실행해야 하는 함수(StartRoutine), 함수에 넘어가는 인자(StartContext), 스택 사이즈 설정
; 284  : 	pThread->start_routine				= StartRoutine;

  00082	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00085	8b 4d 10	 mov	 ecx, DWORD PTR _StartRoutine$[ebp]
  00088	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 285  : 	pThread->start_context				= StartContext;

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0008e	8b 4d 14	 mov	 ecx, DWORD PTR _StartContext$[ebp]
  00091	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 286  : 	pThread->pt_stack_base_address		= pStack;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  0009a	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 287  : 	pThread->stack_size					= StackSize;

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000a0	8b 4d 18	 mov	 ecx, DWORD PTR _StackSize$[ebp]
  000a3	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 288  : 	pThread->priority					= Priority;					// ☞ 스레드의 우선순위 값 설정

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000a9	8b 4d 20	 mov	 ecx, DWORD PTR _Priority$[ebp]
  000ac	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 289  : 
; 290  : 	//PspAddNewThread 함수를 통해 Process에 생성된 쓰레드를 추가
; 291  : 	if( !PspAddNewThread(ProcessHandle, (HANDLE)pThread) ) 

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _PspAddNewThread
  000bf	83 c4 08	 add	 esp, 8
  000c2	85 c0		 test	 eax, eax
  000c4	75 04		 jne	 SHORT $LN1@PsCreateTh

; 292  : 		return FALSE;

  000c6	33 c0		 xor	 eax, eax
  000c8	eb 2b		 jmp	 SHORT $LN4@PsCreateTh
$LN1@PsCreateTh:

; 293  : 
; 294  : 	HalSetupTSS(&pThread->thread_tss32, TRUE, (int)PspTaskEntryPoint, pStack, StackSize);

  000ca	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  000d1	51		 push	 ecx
  000d2	68 00 00 00 00	 push	 OFFSET _PspTaskEntryPoint
  000d7	6a 01		 push	 1
  000d9	8b 55 fc	 mov	 edx, DWORD PTR _pThread$[ebp]
  000dc	83 c2 28	 add	 edx, 40			; 00000028H
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 _HalSetupTSS
  000e5	83 c4 14	 add	 esp, 20			; 00000014H

; 295  : 
; 296  : 	*ThreadHandle = pThread;

  000e8	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  000ee	89 08		 mov	 DWORD PTR [eax], ecx

; 297  : 
; 298  : 	return TRUE;

  000f0	b8 01 00 00 00	 mov	 eax, 1
$LN4@PsCreateTh:

; 299  : }

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
_PsCreateThread ENDP
_TEXT	ENDS
PUBLIC	_PsCreateIntThread
; Function compile flags: /Odtp /ZI
;	COMDAT _PsCreateIntThread
_TEXT	SEGMENT
_pStack$ = -8						; size = 4
_pThread$ = -4						; size = 4
_ThreadHandle$ = 8					; size = 4
_ProcessHandle$ = 12					; size = 4
_StartRoutine$ = 16					; size = 4
_StartContext$ = 20					; size = 4
_StackSize$ = 24					; size = 4
_PsCreateIntThread PROC					; COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 304  : 	PTHREAD_CONTROL_BLOCK pThread;
; 305  : 	int *pStack;
; 306  : 
; 307  : 	pThread = MmAllocateNonCachedMemory(sizeof(THREAD_CONTROL_BLOCK));

  00009	68 94 00 00 00	 push	 148			; 00000094H
  0000e	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  00013	83 c4 04	 add	 esp, 4
  00016	89 45 fc	 mov	 DWORD PTR _pThread$[ebp], eax

; 308  : 	if(pThread == NULL) 

  00019	83 7d fc 00	 cmp	 DWORD PTR _pThread$[ebp], 0
  0001d	75 07		 jne	 SHORT $LN3@PsCreateIn

; 309  : 		return FALSE;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 d0 00 00 00	 jmp	 $LN4@PsCreateIn
$LN3@PsCreateIn:

; 310  : 	
; 311  : 	pStack  = MmAllocateNonCachedMemory(StackSize);

  00026	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _MmAllocateNonCachedMemory
  0002f	83 c4 04	 add	 esp, 4
  00032	89 45 f8	 mov	 DWORD PTR _pStack$[ebp], eax

; 312  : 	if(pStack == NULL) 

  00035	83 7d f8 00	 cmp	 DWORD PTR _pStack$[ebp], 0
  00039	75 07		 jne	 SHORT $LN2@PsCreateIn

; 313  : 		return FALSE;

  0003b	33 c0		 xor	 eax, eax
  0003d	e9 b4 00 00 00	 jmp	 $LN4@PsCreateIn
$LN2@PsCreateIn:

; 314  : 
; 315  : 	pThread->parent_process_handle		= ProcessHandle;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00048	89 08		 mov	 DWORD PTR [eax], ecx

; 316  : 	pThread->thread_id					= PspGetNextThreadID(ProcessHandle);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _PspGetNextThreadID
  00053	83 c4 04	 add	 esp, 4
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00059	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 317  : 	pThread->thread_handle				= (HANDLE)pThread;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  00062	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 318  : 	pThread->thread_status				= THREAD_STATUS_STOP;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00068	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 319  : 	//PsCreateThread함수와 다르게 auto_delete가 false
; 320  : 	pThread->auto_delete				= FALSE;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00072	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 321  : 	pThread->pt_next_thread				= NULL;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0007c	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 322  : 
; 323  : 	//PsCreateThread함수와 다르게 argument의 StartRoutine을 바로 할당
; 324  : 	pThread->start_routine				= StartRoutine;

  00083	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00086	8b 4d 10	 mov	 ecx, DWORD PTR _StartRoutine$[ebp]
  00089	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 325  : 	pThread->start_context				= StartContext;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  0008f	8b 4d 14	 mov	 ecx, DWORD PTR _StartContext$[ebp]
  00092	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 326  : 	pThread->pt_stack_base_address		= pStack;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  0009b	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 327  : 	pThread->stack_size					= StackSize;

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000a1	8b 4d 18	 mov	 ecx, DWORD PTR _StackSize$[ebp]
  000a4	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 328  : 	pThread->priority					= HIGH;							// ☞ 인터럽트 스레드의 우선순위는 높게 설정

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000aa	c7 80 90 00 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+144], 2

; 329  : 	if( !PspAddNewThread(ProcessHandle, (HANDLE)pThread) ) 

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _PspAddNewThread
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 c0		 test	 eax, eax
  000c6	75 04		 jne	 SHORT $LN1@PsCreateIn

; 330  : 		return FALSE;

  000c8	33 c0		 xor	 eax, eax
  000ca	eb 2a		 jmp	 SHORT $LN4@PsCreateIn
$LN1@PsCreateIn:

; 331  : 
; 332  : 	HalSetupTSS(&pThread->thread_tss32, TRUE, (int)StartRoutine, pStack, StackSize);

  000cc	8b 45 18	 mov	 eax, DWORD PTR _StackSize$[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d f8	 mov	 ecx, DWORD PTR _pStack$[ebp]
  000d3	51		 push	 ecx
  000d4	8b 55 10	 mov	 edx, DWORD PTR _StartRoutine$[ebp]
  000d7	52		 push	 edx
  000d8	6a 01		 push	 1
  000da	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  000dd	83 c0 28	 add	 eax, 40			; 00000028H
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _HalSetupTSS
  000e6	83 c4 14	 add	 esp, 20			; 00000014H

; 333  : 
; 334  : 	*ThreadHandle = pThread;

  000e9	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  000ef	89 08		 mov	 DWORD PTR [eax], ecx

; 335  : 
; 336  : 	return TRUE;

  000f1	b8 01 00 00 00	 mov	 eax, 1
$LN4@PsCreateIn:

; 337  : }

  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
_PsCreateIntThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PsSetThreadStatus
_TEXT	SEGMENT
_ThreadHandle$ = 8					; size = 4
_Status$ = 12						; size = 4
_PsSetThreadStatus PROC					; COMDAT

; 340  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 341  : 	PsGetThreadPtr(ThreadHandle)->thread_status = Status;

  00009	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _Status$[ebp]
  0000f	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 342  : 
; 343  : 	return TRUE;

  00012	b8 01 00 00 00	 mov	 eax, 1

; 344  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_PsSetThreadStatus ENDP
_TEXT	ENDS
PUBLIC	_PsGetCurrentThread
; Function compile flags: /Odtp /ZI
;	COMDAT _PsGetCurrentThread
_TEXT	SEGMENT
_thread$ = -4						; size = 4
_PsGetCurrentThread PROC				; COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 349  : 	HANDLE thread;
; 350  : 
; 351  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 352  : 
; 353  : 	// m_ProcMgrBlk의 pt_current_thread를 반환
; 354  : 	thread = (HANDLE)(m_ProcMgrBlk.pt_current_thread);

  0000b	a1 08 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+8
  00010	89 45 fc	 mov	 DWORD PTR _thread$[ebp], eax

; 355  : 
; 356  : EXIT_CRITICAL_SECTION();

  00013	9d		 popfd

; 357  : 
; 358  : 	return thread;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _thread$[ebp]

; 359  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_PsGetCurrentThread ENDP
_TEXT	ENDS
PUBLIC	_PsDeleteProcess
; Function compile flags: /Odtp /ZI
;	COMDAT _PsDeleteProcess
_TEXT	SEGMENT
_ProcessHandle$ = 8					; size = 4
_PsDeleteProcess PROC					; COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 365  : 	return PspPushCuttingItem(&m_ProcessCuttingList, ProcessHandle);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET _m_ProcessCuttingList
  00012	e8 00 00 00 00	 call	 _PspPushCuttingItem
  00017	83 c4 08	 add	 esp, 8

; 366  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_PsDeleteProcess ENDP
_TEXT	ENDS
PUBLIC	_PsDeleteThread
; Function compile flags: /Odtp /ZI
;	COMDAT _PsDeleteThread
_TEXT	SEGMENT
_ThreadHandle$ = 8					; size = 4
_PsDeleteThread PROC					; COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 371  : 	return PspPushCuttingItem(&m_ThreadCuttingList, ThreadHandle);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET _m_ThreadCuttingList
  00012	e8 00 00 00 00	 call	 _PspPushCuttingItem
  00017	83 c4 08	 add	 esp, 8

; 372  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_PsDeleteThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspPushCuttingItem
_TEXT	SEGMENT
_bResult$ = -4						; size = 4
_pCuttingList$ = 8					; size = 4
_item$ = 12						; size = 4
_PspPushCuttingItem PROC				; COMDAT

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 404  : 	BOOL bResult = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1

; 405  : 
; 406  : ENTER_CRITICAL_SECTION();

  00010	9c		 pushfd
  00011	fa		 cli

; 407  : 
; 408  : 	{
; 409  : 		// 커터 큐에 남은 공간 체크
; 410  : 		if( pCuttingList->count >= MAX_CUTTING_ITEM )

  00012	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00015	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00018	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  0001b	7c 09		 jl	 SHORT $LN2@PspPushCut

; 411  : 		{
; 412  : 			bResult = FALSE;

  0001d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 0

; 413  : 			goto $exit;

  00024	eb 40		 jmp	 SHORT $$exit$1092
$LN2@PspPushCut:

; 414  : 		}
; 415  : 
; 416  : 		// PUSH
; 417  : 		pCuttingList->count++;

  00026	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00029	8a 08		 mov	 cl, BYTE PTR [eax]
  0002b	80 c1 01	 add	 cl, 1
  0002e	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  00031	88 0a		 mov	 BYTE PTR [edx], cl

; 418  : 		pCuttingList->handle_list[pCuttingList->tail++] = item;

  00033	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00036	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0003a	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _item$[ebp]
  00040	89 44 8a 03	 mov	 DWORD PTR [edx+ecx*4+3], eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _pCuttingList$[ebp]
  00047	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0004a	80 c2 01	 add	 dl, 1
  0004d	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00050	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 419  : 
; 420  : 		if( pCuttingList->tail >= MAX_CUTTING_ITEM )

  00053	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00056	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0005a	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  0005d	7c 07		 jl	 SHORT $$exit$1092

; 421  : 			pCuttingList->tail = 0;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00062	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0
$$exit$1092:

; 422  : 	}
; 423  : 
; 424  : $exit:
; 425  : EXIT_CRITICAL_SECTION();

  00066	9d		 popfd

; 426  : 
; 427  : 	return bResult;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 428  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_PspPushCuttingItem ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspGetNextProcessID
_TEXT	SEGMENT
_process_id$ = -4					; size = 4
_PspGetNextProcessID PROC				; COMDAT

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 434  : 	DWORD process_id;
; 435  : 
; 436  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 437  : 	process_id = m_ProcMgrBlk.next_process_id++;

  0000b	a1 04 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+4
  00010	89 45 fc	 mov	 DWORD PTR _process_id$[ebp], eax
  00013	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _m_ProcMgrBlk+4
  00019	83 c1 01	 add	 ecx, 1
  0001c	89 0d 04 00 00
	00		 mov	 DWORD PTR _m_ProcMgrBlk+4, ecx

; 438  : EXIT_CRITICAL_SECTION();

  00022	9d		 popfd

; 439  : 
; 440  : 	return process_id;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _process_id$[ebp]

; 441  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_PspGetNextProcessID ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspGetNextThreadID
_TEXT	SEGMENT
_thread_id$ = -4					; size = 4
_ProcessHandle$ = 8					; size = 4
_PspGetNextThreadID PROC				; COMDAT

; 445  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 446  : 	DWORD thread_id;
; 447  : 
; 448  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 449  : 	thread_id = PsGetProcessPtr(ProcessHandle)->next_thread_id++;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0000e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00011	89 4d fc	 mov	 DWORD PTR _thread_id$[ebp], ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  00017	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0001a	83 c0 01	 add	 eax, 1
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00020	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 450  : EXIT_CRITICAL_SECTION();

  00023	9d		 popfd

; 451  : 
; 452  : 	return thread_id;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _thread_id$[ebp]

; 453  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_PspGetNextThreadID ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspAddNewProcess
_TEXT	SEGMENT
_pt_next_process$ = -4					; size = 4
_ProcessHandle$ = 8					; size = 4
_PspAddNewProcess PROC					; COMDAT

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 458  : 	PPROCESS_CONTROL_BLOCK *pt_next_process;
; 459  : 
; 460  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 461  : 	pt_next_process = &m_ProcMgrBlk.pt_head_process;

  0000b	c7 45 fc 18 00
	00 00		 mov	 DWORD PTR _pt_next_process$[ebp], OFFSET _m_ProcMgrBlk+24
$LN2@PspAddNewP:

; 462  : 	while(*pt_next_process)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_process$[ebp]
  00015	83 38 00	 cmp	 DWORD PTR [eax], 0
  00018	74 0d		 je	 SHORT $LN1@PspAddNewP

; 463  : 		pt_next_process = &(*pt_next_process)->pt_next_process;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_process$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	83 c1 08	 add	 ecx, 8
  00022	89 4d fc	 mov	 DWORD PTR _pt_next_process$[ebp], ecx
  00025	eb eb		 jmp	 SHORT $LN2@PspAddNewP
$LN1@PspAddNewP:

; 464  : 	*pt_next_process = PsGetProcessPtr(ProcessHandle);

  00027	8b 45 fc	 mov	 eax, DWORD PTR _pt_next_process$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  0002d	89 08		 mov	 DWORD PTR [eax], ecx

; 465  : 	m_ProcMgrBlk.process_count++;

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk
  00034	83 c0 01	 add	 eax, 1
  00037	a3 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk, eax

; 466  : EXIT_CRITICAL_SECTION();

  0003c	9d		 popfd

; 467  : 
; 468  : 	return TRUE;

  0003d	b8 01 00 00 00	 mov	 eax, 1

; 469  : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_PspAddNewProcess ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspAddNewThread
_TEXT	SEGMENT
_pt_next_thread$ = -8					; size = 4
_priority$ = -4						; size = 4
_ProcessHandle$ = 8					; size = 4
_ThreadHandle$ = 12					; size = 4
_PspAddNewThread PROC					; COMDAT

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 474  : 	THREAD_PRIORITY priority;
; 475  : 	PTHREAD_CONTROL_BLOCK *pt_next_thread;
; 476  : 
; 477  : ENTER_CRITICAL_SECTION();

  00009	9c		 pushfd
  0000a	fa		 cli

; 478  : 	priority = PsGetThreadPtr(ThreadHandle)->priority;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0000e	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00014	89 4d fc	 mov	 DWORD PTR _priority$[ebp], ecx

; 479  : 
; 480  : 	pt_next_thread = &PsGetProcessPtr(ProcessHandle)->pt_head_thread[priority];

  00017	8b 45 fc	 mov	 eax, DWORD PTR _priority$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  0001d	8d 54 81 14	 lea	 edx, DWORD PTR [ecx+eax*4+20]
  00021	89 55 f8	 mov	 DWORD PTR _pt_next_thread$[ebp], edx
$LN2@PspAddNewT:

; 481  : 	while(*pt_next_thread)

  00024	8b 45 f8	 mov	 eax, DWORD PTR _pt_next_thread$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	74 0d		 je	 SHORT $LN1@PspAddNewT

; 482  : 		pt_next_thread = &(*pt_next_thread)->pt_next_thread;

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _pt_next_thread$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	83 c1 14	 add	 ecx, 20			; 00000014H
  00034	89 4d f8	 mov	 DWORD PTR _pt_next_thread$[ebp], ecx
  00037	eb eb		 jmp	 SHORT $LN2@PspAddNewT
$LN1@PspAddNewT:

; 483  : 	*pt_next_thread = PsGetThreadPtr(ThreadHandle);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _pt_next_thread$[ebp]
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _ThreadHandle$[ebp]
  0003f	89 08		 mov	 DWORD PTR [eax], ecx

; 484  : 	PsGetProcessPtr(ProcessHandle)->thread_count++;

  00041	8b 45 08	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00044	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00047	83 c1 01	 add	 ecx, 1
  0004a	8b 55 08	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  0004d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 485  : EXIT_CRITICAL_SECTION();

  00050	9d		 popfd

; 486  : 
; 487  : 	return TRUE;

  00051	b8 01 00 00 00	 mov	 eax, 1

; 488  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_PspAddNewThread ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@HODEDBEP@LOW3?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@GJEPCFAM@LOW2?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@FAMCBJMJ@LOW1?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@JMFBNMIE@MID7?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@ILCKMIMH@MID6?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@LCKHPEAC@MID5?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@KFNMOAEB@MID4?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@MBLNINII@MID3?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@NGMGJJML@MID2?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@OPELKFAO@MID1?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@ECMNAENK@TCUT?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@EBMLDPKF@PCUT?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@JJEBABFL@IDLE?5THREAD?$AA@		; `string'
PUBLIC	??_C@_0M@IPGMMDPP@MAIN?5THREAD?$AA@		; `string'
EXTRN	_HalWriteTssIntoGdt:PROC
EXTRN	_HalSetupTaskLink:PROC
;	COMDAT ??_C@_0M@HODEDBEP@LOW3?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@HODEDBEP@LOW3?5THREAD?$AA@ DB 'LOW3 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GJEPCFAM@LOW2?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@GJEPCFAM@LOW2?5THREAD?$AA@ DB 'LOW2 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FAMCBJMJ@LOW1?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@FAMCBJMJ@LOW1?5THREAD?$AA@ DB 'LOW1 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JMFBNMIE@MID7?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@JMFBNMIE@MID7?5THREAD?$AA@ DB 'MID7 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILCKMIMH@MID6?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@ILCKMIMH@MID6?5THREAD?$AA@ DB 'MID6 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LCKHPEAC@MID5?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@LCKHPEAC@MID5?5THREAD?$AA@ DB 'MID5 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KFNMOAEB@MID4?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@KFNMOAEB@MID4?5THREAD?$AA@ DB 'MID4 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MBLNINII@MID3?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@MBLNINII@MID3?5THREAD?$AA@ DB 'MID3 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NGMGJJML@MID2?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@NGMGJJML@MID2?5THREAD?$AA@ DB 'MID2 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OPELKFAO@MID1?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@OPELKFAO@MID1?5THREAD?$AA@ DB 'MID1 THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ECMNAENK@TCUT?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@ECMNAENK@TCUT?5THREAD?$AA@ DB 'TCUT THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EBMLDPKF@PCUT?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@EBMLDPKF@PCUT?5THREAD?$AA@ DB 'PCUT THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJEBABFL@IDLE?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@JJEBABFL@IDLE?5THREAD?$AA@ DB 'IDLE THREAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IPGMMDPP@MAIN?5THREAD?$AA@
CONST	SEGMENT
??_C@_0M@IPGMMDPP@MAIN?5THREAD?$AA@ DB 'MAIN THREAD', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _PspCreateSystemProcess
_TEXT	SEGMENT
_sw_task_sw_handle$ = -68				; size = 4
_tmr_thread_handle$ = -64				; size = 4
_test_handle$ = -60					; size = 40
_thread_cutter_handle$ = -20				; size = 4
_process_cutter_handle$ = -16				; size = 4
_idle_thread_handle$ = -12				; size = 4
_init_thread_handle$ = -8				; size = 4
_process_handle$ = -4					; size = 4
_PspCreateSystemProcess PROC				; COMDAT

; 821  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 822  : 	HANDLE process_handle;
; 823  : 	HANDLE init_thread_handle, idle_thread_handle, process_cutter_handle, thread_cutter_handle, test_handle[10];
; 824  : 	HANDLE tmr_thread_handle, sw_task_sw_handle;
; 825  : 
; 826  : 	//메인 프로세스를 생성해주는 PSCreateProcess 함수 호출
; 827  : 	if(!PsCreateProcess(&process_handle)) 

  0000c	8d 45 fc	 lea	 eax, DWORD PTR _process_handle$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _PsCreateProcess
  00015	83 c4 04	 add	 esp, 4
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN17@PspCreateS

; 828  : 		return FALSE;

  0001c	33 c0		 xor	 eax, eax
  0001e	e9 c0 04 00 00	 jmp	 $LN18@PspCreateS
$LN17@PspCreateS:

; 829  : 
; 830  : 	//프로세스를 생성하기 위해 베이스가 될 메인 쓰레드(init 쓰레드) 생성 
; 831  : 	if(!PsCreateThread(&init_thread_handle, process_handle, NULL, NULL, DEFAULT_STACK_SIZE, FALSE, HIGH)) 

  00023	6a 02		 push	 2
  00025	6a 00		 push	 0
  00027	68 00 00 01 00	 push	 65536			; 00010000H
  0002c	6a 00		 push	 0
  0002e	6a 00		 push	 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00033	50		 push	 eax
  00034	8d 4d f8	 lea	 ecx, DWORD PTR _init_thread_handle$[ebp]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _PsCreateThread
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	85 c0		 test	 eax, eax
  00042	75 07		 jne	 SHORT $LN16@PspCreateS

; 832  : 		return FALSE;

  00044	33 c0		 xor	 eax, eax
  00046	e9 98 04 00 00	 jmp	 $LN18@PspCreateS
$LN16@PspCreateS:

; 833  : 	// ☞ 메인 스레드에 이름 설정
; 834  : 	thread_name[PsGetThreadPtr(init_thread_handle)->thread_id] = "MAIN THREAD";

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _init_thread_handle$[ebp]
  0004e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00051	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@IPGMMDPP@MAIN?5THREAD?$AA@

; 835  : 
; 836  : 	//초기 쓰레드의 백링크(Prev-Link) 설정
; 837  : 	HalSetupTaskLink(&PsGetThreadPtr(init_thread_handle)->thread_tss32, TASK_SW_SEG);

  0005c	6a 28		 push	 40			; 00000028H
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _init_thread_handle$[ebp]
  00061	83 c0 28	 add	 eax, 40			; 00000028H
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _HalSetupTaskLink
  0006a	83 c4 08	 add	 esp, 8

; 838  : 	//초기 쓰레드의 TSS를 GDT내에 설정
; 839  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(init_thread_handle)->thread_tss32, sizeof(TSS_32), INIT_TSS_SEG, FALSE);

  0006d	6a 00		 push	 0
  0006f	6a 30		 push	 48			; 00000030H
  00071	6a 68		 push	 104			; 00000068H
  00073	8b 45 f8	 mov	 eax, DWORD PTR _init_thread_handle$[ebp]
  00076	83 c0 28	 add	 eax, 40			; 00000028H
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  0007f	83 c4 10	 add	 esp, 16			; 00000010H

; 840  : 	_asm 
; 841  : 	{
; 842  : 		push	ax

  00082	66 50		 push	 ax

; 843  : 		mov		ax, INIT_TSS_SEG

  00084	66 b8 30 00	 mov	 ax, 48			; 00000030H

; 844  : 		ltr		ax

  00088	0f 00 d8	 ltr	 ax

; 845  : 		pop		ax

  0008b	66 58		 pop	 ax

; 846  : 	}
; 847  : 
; 848  : 	// 인터럽트 Thread 수행 시 Timer 처리를 위한 인터럽트 쓰레드 생성
; 849  : 	if( !PsCreateIntThread(&tmr_thread_handle, process_handle, Psp_IRQ_SystemTimer, NULL, DEFAULT_STACK_SIZE) )

  0008d	68 00 00 01 00	 push	 65536			; 00010000H
  00092	6a 00		 push	 0
  00094	68 00 00 00 00	 push	 OFFSET _Psp_IRQ_SystemTimer
  00099	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  0009c	50		 push	 eax
  0009d	8d 4d c0	 lea	 ecx, DWORD PTR _tmr_thread_handle$[ebp]
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 _PsCreateIntThread
  000a6	83 c4 14	 add	 esp, 20			; 00000014H
  000a9	85 c0		 test	 eax, eax
  000ab	75 07		 jne	 SHORT $LN15@PspCreateS

; 850  : 		return FALSE;

  000ad	33 c0		 xor	 eax, eax
  000af	e9 2f 04 00 00	 jmp	 $LN18@PspCreateS
$LN15@PspCreateS:

; 851  : 
; 852  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(tmr_thread_handle)->thread_tss32, sizeof(TSS_32), TMR_TSS_SEG, FALSE);

  000b4	6a 00		 push	 0
  000b6	6a 38		 push	 56			; 00000038H
  000b8	6a 68		 push	 104			; 00000068H
  000ba	8b 45 c0	 mov	 eax, DWORD PTR _tmr_thread_handle$[ebp]
  000bd	83 c0 28	 add	 eax, 40			; 00000028H
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  000c6	83 c4 10	 add	 esp, 16			; 00000010H

; 853  : 
; 854  : 	// 소프트웨어 인터럽트 처리를 위한 인터럽트 스레드 생성
; 855  : 	if( !PsCreateIntThread(&sw_task_sw_handle, process_handle, PspSoftTaskSW, NULL, DEFAULT_STACK_SIZE) )

  000c9	68 00 00 01 00	 push	 65536			; 00010000H
  000ce	6a 00		 push	 0
  000d0	68 00 00 00 00	 push	 OFFSET _PspSoftTaskSW
  000d5	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  000d8	50		 push	 eax
  000d9	8d 4d bc	 lea	 ecx, DWORD PTR _sw_task_sw_handle$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 _PsCreateIntThread
  000e2	83 c4 14	 add	 esp, 20			; 00000014H
  000e5	85 c0		 test	 eax, eax
  000e7	75 07		 jne	 SHORT $LN14@PspCreateS

; 856  : 		return FALSE;

  000e9	33 c0		 xor	 eax, eax
  000eb	e9 f3 03 00 00	 jmp	 $LN18@PspCreateS
$LN14@PspCreateS:

; 857  : 
; 858  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(sw_task_sw_handle)->thread_tss32, sizeof(TSS_32), SOFT_TS_TSS_SEG, FALSE);

  000f0	6a 00		 push	 0
  000f2	6a 40		 push	 64			; 00000040H
  000f4	6a 68		 push	 104			; 00000068H
  000f6	8b 45 bc	 mov	 eax, DWORD PTR _sw_task_sw_handle$[ebp]
  000f9	83 c0 28	 add	 eax, 40			; 00000028H
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  00102	83 c4 10	 add	 esp, 16			; 00000010H

; 859  : 
; 860  : 	// IDLE 스레드 생성
; 861  : 	if( !PsCreateThread(&idle_thread_handle, process_handle, PspIdleThread, NULL, DEFAULT_STACK_SIZE, FALSE, HIGH) )

  00105	6a 02		 push	 2
  00107	6a 00		 push	 0
  00109	68 00 00 01 00	 push	 65536			; 00010000H
  0010e	6a 00		 push	 0
  00110	68 00 00 00 00	 push	 OFFSET _PspIdleThread
  00115	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00118	50		 push	 eax
  00119	8d 4d f4	 lea	 ecx, DWORD PTR _idle_thread_handle$[ebp]
  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 _PsCreateThread
  00122	83 c4 1c	 add	 esp, 28			; 0000001cH
  00125	85 c0		 test	 eax, eax
  00127	75 07		 jne	 SHORT $LN13@PspCreateS

; 862  : 		return FALSE;

  00129	33 c0		 xor	 eax, eax
  0012b	e9 b3 03 00 00	 jmp	 $LN18@PspCreateS
$LN13@PspCreateS:

; 863  : 	// ☞ IDLE 커터 스레드에 이름 설정
; 864  : 	thread_name[PsGetThreadPtr(idle_thread_handle)->thread_id] = "IDLE THREAD";

  00130	8b 45 f4	 mov	 eax, DWORD PTR _idle_thread_handle$[ebp]
  00133	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00136	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@JJEBABFL@IDLE?5THREAD?$AA@

; 865  : 	PsSetThreadStatus(idle_thread_handle, THREAD_STATUS_RUNNING);

  00141	6a 04		 push	 4
  00143	8b 45 f4	 mov	 eax, DWORD PTR _idle_thread_handle$[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 _PsSetThreadStatus
  0014c	83 c4 08	 add	 esp, 8

; 866  : 
; 867  : 	HalWriteTssIntoGdt(&PsGetThreadPtr(idle_thread_handle)->thread_tss32, sizeof(TSS_32), TASK_SW_SEG, TRUE);

  0014f	6a 01		 push	 1
  00151	6a 28		 push	 40			; 00000028H
  00153	6a 68		 push	 104			; 00000068H
  00155	8b 45 f4	 mov	 eax, DWORD PTR _idle_thread_handle$[ebp]
  00158	83 c0 28	 add	 eax, 40			; 00000028H
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  00161	83 c4 10	 add	 esp, 16			; 00000010H

; 868  : 
; 869  : 	m_ProcMgrBlk.pt_current_thread = idle_thread_handle;

  00164	8b 45 f4	 mov	 eax, DWORD PTR _idle_thread_handle$[ebp]
  00167	a3 08 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+8, eax

; 870  : 
; 871  : 	// 종료된 프로세스와 쓰레드를 삭제하는 cutter 스레드
; 872  : 	if( !PsCreateThread(&process_cutter_handle, process_handle, PspProcessCutterThread, NULL, DEFAULT_STACK_SIZE, FALSE, HIGH) )

  0016c	6a 02		 push	 2
  0016e	6a 00		 push	 0
  00170	68 00 00 01 00	 push	 65536			; 00010000H
  00175	6a 00		 push	 0
  00177	68 00 00 00 00	 push	 OFFSET _PspProcessCutterThread
  0017c	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  0017f	50		 push	 eax
  00180	8d 4d f0	 lea	 ecx, DWORD PTR _process_cutter_handle$[ebp]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 _PsCreateThread
  00189	83 c4 1c	 add	 esp, 28			; 0000001cH
  0018c	85 c0		 test	 eax, eax
  0018e	75 07		 jne	 SHORT $LN12@PspCreateS

; 873  : 		return FALSE;

  00190	33 c0		 xor	 eax, eax
  00192	e9 4c 03 00 00	 jmp	 $LN18@PspCreateS
$LN12@PspCreateS:

; 874  : 	// ☞ 프로세스 커터 스레드에 이름 설정
; 875  : 	thread_name[PsGetThreadPtr(process_cutter_handle)->thread_id] = "PCUT THREAD";

  00197	8b 45 f0	 mov	 eax, DWORD PTR _process_cutter_handle$[ebp]
  0019a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0019d	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@EBMLDPKF@PCUT?5THREAD?$AA@

; 876  : 	PsSetThreadStatus(process_cutter_handle, THREAD_STATUS_READY);

  001a8	6a 02		 push	 2
  001aa	8b 45 f0	 mov	 eax, DWORD PTR _process_cutter_handle$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 _PsSetThreadStatus
  001b3	83 c4 08	 add	 esp, 8

; 877  : 	
; 878  : 	if( !PsCreateThread(&thread_cutter_handle, process_handle, PspThreadCutterThread, NULL, DEFAULT_STACK_SIZE, FALSE, HIGH) )

  001b6	6a 02		 push	 2
  001b8	6a 00		 push	 0
  001ba	68 00 00 01 00	 push	 65536			; 00010000H
  001bf	6a 00		 push	 0
  001c1	68 00 00 00 00	 push	 OFFSET _PspThreadCutterThread
  001c6	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  001c9	50		 push	 eax
  001ca	8d 4d ec	 lea	 ecx, DWORD PTR _thread_cutter_handle$[ebp]
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 _PsCreateThread
  001d3	83 c4 1c	 add	 esp, 28			; 0000001cH
  001d6	85 c0		 test	 eax, eax
  001d8	75 07		 jne	 SHORT $LN11@PspCreateS

; 879  : 		return FALSE;

  001da	33 c0		 xor	 eax, eax
  001dc	e9 02 03 00 00	 jmp	 $LN18@PspCreateS
$LN11@PspCreateS:

; 880  : 	// ☞ 스레드 커터 스레드에 이름 설정
; 881  : 	thread_name[PsGetThreadPtr(thread_cutter_handle)->thread_id] = "TCUT THREAD";

  001e1	8b 45 ec	 mov	 eax, DWORD PTR _thread_cutter_handle$[ebp]
  001e4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e7	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@ECMNAENK@TCUT?5THREAD?$AA@

; 882  : 	PsSetThreadStatus(thread_cutter_handle, THREAD_STATUS_READY);

  001f2	6a 02		 push	 2
  001f4	8b 45 ec	 mov	 eax, DWORD PTR _thread_cutter_handle$[ebp]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _PsSetThreadStatus
  001fd	83 c4 08	 add	 esp, 8

; 883  : 
; 884  : 
; 885  : 	// ☞ 테스트 MID 시스템 스레드 1 생성
; 886  : 	if( !PsCreateThread(&test_handle[0], process_handle, PspMidPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, MID) )

  00200	6a 01		 push	 1
  00202	6a 00		 push	 0
  00204	68 00 00 01 00	 push	 65536			; 00010000H
  00209	6a 00		 push	 0
  0020b	68 00 00 00 00	 push	 OFFSET _PspMidPriorityThread
  00210	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00213	50		 push	 eax
  00214	8d 4d c4	 lea	 ecx, DWORD PTR _test_handle$[ebp]
  00217	51		 push	 ecx
  00218	e8 00 00 00 00	 call	 _PsCreateThread
  0021d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00220	85 c0		 test	 eax, eax
  00222	75 07		 jne	 SHORT $LN10@PspCreateS

; 887  : 		return FALSE;

  00224	33 c0		 xor	 eax, eax
  00226	e9 b8 02 00 00	 jmp	 $LN18@PspCreateS
$LN10@PspCreateS:

; 888  : 	thread_name[PsGetThreadPtr(test_handle[0])->thread_id] = "MID1 THREAD";

  0022b	8b 45 c4	 mov	 eax, DWORD PTR _test_handle$[ebp]
  0022e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00231	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@OPELKFAO@MID1?5THREAD?$AA@

; 889  : 	PsSetThreadStatus(test_handle[0], THREAD_STATUS_READY);

  0023c	6a 02		 push	 2
  0023e	8b 45 c4	 mov	 eax, DWORD PTR _test_handle$[ebp]
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00247	83 c4 08	 add	 esp, 8

; 890  : 
; 891  : 	// ☞ 테스트 MID 시스템 스레드 2 생성
; 892  : 	if( !PsCreateThread(&test_handle[1], process_handle, PspMidPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, MID) )

  0024a	6a 01		 push	 1
  0024c	6a 00		 push	 0
  0024e	68 00 00 01 00	 push	 65536			; 00010000H
  00253	6a 00		 push	 0
  00255	68 00 00 00 00	 push	 OFFSET _PspMidPriorityThread
  0025a	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  0025d	50		 push	 eax
  0025e	8d 4d c8	 lea	 ecx, DWORD PTR _test_handle$[ebp+4]
  00261	51		 push	 ecx
  00262	e8 00 00 00 00	 call	 _PsCreateThread
  00267	83 c4 1c	 add	 esp, 28			; 0000001cH
  0026a	85 c0		 test	 eax, eax
  0026c	75 07		 jne	 SHORT $LN9@PspCreateS

; 893  : 		return FALSE;

  0026e	33 c0		 xor	 eax, eax
  00270	e9 6e 02 00 00	 jmp	 $LN18@PspCreateS
$LN9@PspCreateS:

; 894  : 	thread_name[PsGetThreadPtr(test_handle[1])->thread_id] = "MID2 THREAD";

  00275	8b 45 c8	 mov	 eax, DWORD PTR _test_handle$[ebp+4]
  00278	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0027b	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@NGMGJJML@MID2?5THREAD?$AA@

; 895  : 	PsSetThreadStatus(test_handle[1], THREAD_STATUS_READY);

  00286	6a 02		 push	 2
  00288	8b 45 c8	 mov	 eax, DWORD PTR _test_handle$[ebp+4]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00291	83 c4 08	 add	 esp, 8

; 896  : 
; 897  : 	// ☞ 테스트 MID 시스템 스레드 3 생성
; 898  : 	if( !PsCreateThread(&test_handle[2], process_handle, PspMidPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, MID) )

  00294	6a 01		 push	 1
  00296	6a 00		 push	 0
  00298	68 00 00 01 00	 push	 65536			; 00010000H
  0029d	6a 00		 push	 0
  0029f	68 00 00 00 00	 push	 OFFSET _PspMidPriorityThread
  002a4	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  002a7	50		 push	 eax
  002a8	8d 4d cc	 lea	 ecx, DWORD PTR _test_handle$[ebp+8]
  002ab	51		 push	 ecx
  002ac	e8 00 00 00 00	 call	 _PsCreateThread
  002b1	83 c4 1c	 add	 esp, 28			; 0000001cH
  002b4	85 c0		 test	 eax, eax
  002b6	75 07		 jne	 SHORT $LN8@PspCreateS

; 899  : 		return FALSE;

  002b8	33 c0		 xor	 eax, eax
  002ba	e9 24 02 00 00	 jmp	 $LN18@PspCreateS
$LN8@PspCreateS:

; 900  : 	thread_name[PsGetThreadPtr(test_handle[2])->thread_id] = "MID3 THREAD";

  002bf	8b 45 cc	 mov	 eax, DWORD PTR _test_handle$[ebp+8]
  002c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002c5	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@MBLNINII@MID3?5THREAD?$AA@

; 901  : 	PsSetThreadStatus(test_handle[2], THREAD_STATUS_READY);

  002d0	6a 02		 push	 2
  002d2	8b 45 cc	 mov	 eax, DWORD PTR _test_handle$[ebp+8]
  002d5	50		 push	 eax
  002d6	e8 00 00 00 00	 call	 _PsSetThreadStatus
  002db	83 c4 08	 add	 esp, 8

; 902  : 
; 903  : 	// ☞ 테스트 MID 시스템 스레드 4 생성
; 904  : 	if( !PsCreateThread(&test_handle[3], process_handle, PspMidPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, MID) )

  002de	6a 01		 push	 1
  002e0	6a 00		 push	 0
  002e2	68 00 00 01 00	 push	 65536			; 00010000H
  002e7	6a 00		 push	 0
  002e9	68 00 00 00 00	 push	 OFFSET _PspMidPriorityThread
  002ee	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  002f1	50		 push	 eax
  002f2	8d 4d d0	 lea	 ecx, DWORD PTR _test_handle$[ebp+12]
  002f5	51		 push	 ecx
  002f6	e8 00 00 00 00	 call	 _PsCreateThread
  002fb	83 c4 1c	 add	 esp, 28			; 0000001cH
  002fe	85 c0		 test	 eax, eax
  00300	75 07		 jne	 SHORT $LN7@PspCreateS

; 905  : 		return FALSE;

  00302	33 c0		 xor	 eax, eax
  00304	e9 da 01 00 00	 jmp	 $LN18@PspCreateS
$LN7@PspCreateS:

; 906  : 	thread_name[PsGetThreadPtr(test_handle[3])->thread_id] = "MID4 THREAD";

  00309	8b 45 d0	 mov	 eax, DWORD PTR _test_handle$[ebp+12]
  0030c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0030f	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@KFNMOAEB@MID4?5THREAD?$AA@

; 907  : 	PsSetThreadStatus(test_handle[3], THREAD_STATUS_READY);

  0031a	6a 02		 push	 2
  0031c	8b 45 d0	 mov	 eax, DWORD PTR _test_handle$[ebp+12]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00325	83 c4 08	 add	 esp, 8

; 908  : 
; 909  : 	// ☞ 테스트 MID 시스템 스레드 5 생성
; 910  : 	if( !PsCreateThread(&test_handle[4], process_handle, PspMidPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, MID) )

  00328	6a 01		 push	 1
  0032a	6a 00		 push	 0
  0032c	68 00 00 01 00	 push	 65536			; 00010000H
  00331	6a 00		 push	 0
  00333	68 00 00 00 00	 push	 OFFSET _PspMidPriorityThread
  00338	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  0033b	50		 push	 eax
  0033c	8d 4d d4	 lea	 ecx, DWORD PTR _test_handle$[ebp+16]
  0033f	51		 push	 ecx
  00340	e8 00 00 00 00	 call	 _PsCreateThread
  00345	83 c4 1c	 add	 esp, 28			; 0000001cH
  00348	85 c0		 test	 eax, eax
  0034a	75 07		 jne	 SHORT $LN6@PspCreateS

; 911  : 		return FALSE;

  0034c	33 c0		 xor	 eax, eax
  0034e	e9 90 01 00 00	 jmp	 $LN18@PspCreateS
$LN6@PspCreateS:

; 912  : 	thread_name[PsGetThreadPtr(test_handle[4])->thread_id] = "MID5 THREAD";

  00353	8b 45 d4	 mov	 eax, DWORD PTR _test_handle$[ebp+16]
  00356	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00359	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@LCKHPEAC@MID5?5THREAD?$AA@

; 913  : 	PsSetThreadStatus(test_handle[4], THREAD_STATUS_READY);

  00364	6a 02		 push	 2
  00366	8b 45 d4	 mov	 eax, DWORD PTR _test_handle$[ebp+16]
  00369	50		 push	 eax
  0036a	e8 00 00 00 00	 call	 _PsSetThreadStatus
  0036f	83 c4 08	 add	 esp, 8

; 914  : 
; 915  : 	// ☞ 테스트 MID 시스템 스레드 6 생성
; 916  : 	if( !PsCreateThread(&test_handle[5], process_handle, PspMidPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, MID) )

  00372	6a 01		 push	 1
  00374	6a 00		 push	 0
  00376	68 00 00 01 00	 push	 65536			; 00010000H
  0037b	6a 00		 push	 0
  0037d	68 00 00 00 00	 push	 OFFSET _PspMidPriorityThread
  00382	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00385	50		 push	 eax
  00386	8d 4d d8	 lea	 ecx, DWORD PTR _test_handle$[ebp+20]
  00389	51		 push	 ecx
  0038a	e8 00 00 00 00	 call	 _PsCreateThread
  0038f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00392	85 c0		 test	 eax, eax
  00394	75 07		 jne	 SHORT $LN5@PspCreateS

; 917  : 		return FALSE;

  00396	33 c0		 xor	 eax, eax
  00398	e9 46 01 00 00	 jmp	 $LN18@PspCreateS
$LN5@PspCreateS:

; 918  : 	thread_name[PsGetThreadPtr(test_handle[5])->thread_id] = "MID6 THREAD";

  0039d	8b 45 d8	 mov	 eax, DWORD PTR _test_handle$[ebp+20]
  003a0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003a3	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@ILCKMIMH@MID6?5THREAD?$AA@

; 919  : 	PsSetThreadStatus(test_handle[5], THREAD_STATUS_READY);

  003ae	6a 02		 push	 2
  003b0	8b 45 d8	 mov	 eax, DWORD PTR _test_handle$[ebp+20]
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 _PsSetThreadStatus
  003b9	83 c4 08	 add	 esp, 8

; 920  : 
; 921  : 	// ☞ 테스트 MID 시스템 스레드 7 생성
; 922  : 	if( !PsCreateThread(&test_handle[6], process_handle, PspMidPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, MID) )

  003bc	6a 01		 push	 1
  003be	6a 00		 push	 0
  003c0	68 00 00 01 00	 push	 65536			; 00010000H
  003c5	6a 00		 push	 0
  003c7	68 00 00 00 00	 push	 OFFSET _PspMidPriorityThread
  003cc	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  003cf	50		 push	 eax
  003d0	8d 4d dc	 lea	 ecx, DWORD PTR _test_handle$[ebp+24]
  003d3	51		 push	 ecx
  003d4	e8 00 00 00 00	 call	 _PsCreateThread
  003d9	83 c4 1c	 add	 esp, 28			; 0000001cH
  003dc	85 c0		 test	 eax, eax
  003de	75 07		 jne	 SHORT $LN4@PspCreateS

; 923  : 		return FALSE;

  003e0	33 c0		 xor	 eax, eax
  003e2	e9 fc 00 00 00	 jmp	 $LN18@PspCreateS
$LN4@PspCreateS:

; 924  : 	thread_name[PsGetThreadPtr(test_handle[6])->thread_id] = "MID7 THREAD";

  003e7	8b 45 dc	 mov	 eax, DWORD PTR _test_handle$[ebp+24]
  003ea	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003ed	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@JMFBNMIE@MID7?5THREAD?$AA@

; 925  : 	PsSetThreadStatus(test_handle[6], THREAD_STATUS_READY);

  003f8	6a 02		 push	 2
  003fa	8b 45 dc	 mov	 eax, DWORD PTR _test_handle$[ebp+24]
  003fd	50		 push	 eax
  003fe	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00403	83 c4 08	 add	 esp, 8

; 926  : 
; 927  : 
; 928  : 
; 929  : 	// ☞ 테스트 LOW 시스템 스레드 1 생성
; 930  : 	if( !PsCreateThread(&test_handle[7], process_handle, PspLowPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, LOW) )

  00406	6a 00		 push	 0
  00408	6a 00		 push	 0
  0040a	68 00 00 01 00	 push	 65536			; 00010000H
  0040f	6a 00		 push	 0
  00411	68 00 00 00 00	 push	 OFFSET _PspLowPriorityThread
  00416	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00419	50		 push	 eax
  0041a	8d 4d e0	 lea	 ecx, DWORD PTR _test_handle$[ebp+28]
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 _PsCreateThread
  00423	83 c4 1c	 add	 esp, 28			; 0000001cH
  00426	85 c0		 test	 eax, eax
  00428	75 07		 jne	 SHORT $LN3@PspCreateS

; 931  : 		return FALSE;

  0042a	33 c0		 xor	 eax, eax
  0042c	e9 b2 00 00 00	 jmp	 $LN18@PspCreateS
$LN3@PspCreateS:

; 932  : 	thread_name[PsGetThreadPtr(test_handle[7])->thread_id] = "LOW1 THREAD";

  00431	8b 45 e0	 mov	 eax, DWORD PTR _test_handle$[ebp+28]
  00434	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00437	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@FAMCBJMJ@LOW1?5THREAD?$AA@

; 933  : 	PsSetThreadStatus(test_handle[7], THREAD_STATUS_READY);

  00442	6a 02		 push	 2
  00444	8b 45 e0	 mov	 eax, DWORD PTR _test_handle$[ebp+28]
  00447	50		 push	 eax
  00448	e8 00 00 00 00	 call	 _PsSetThreadStatus
  0044d	83 c4 08	 add	 esp, 8

; 934  : 
; 935  : 	// ☞ 테스트 LOW 시스템 스레드 2 생성
; 936  : 	if( !PsCreateThread(&test_handle[8], process_handle, PspLowPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, LOW) )

  00450	6a 00		 push	 0
  00452	6a 00		 push	 0
  00454	68 00 00 01 00	 push	 65536			; 00010000H
  00459	6a 00		 push	 0
  0045b	68 00 00 00 00	 push	 OFFSET _PspLowPriorityThread
  00460	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  00463	50		 push	 eax
  00464	8d 4d e4	 lea	 ecx, DWORD PTR _test_handle$[ebp+32]
  00467	51		 push	 ecx
  00468	e8 00 00 00 00	 call	 _PsCreateThread
  0046d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00470	85 c0		 test	 eax, eax
  00472	75 04		 jne	 SHORT $LN2@PspCreateS

; 937  : 		return FALSE;

  00474	33 c0		 xor	 eax, eax
  00476	eb 6b		 jmp	 SHORT $LN18@PspCreateS
$LN2@PspCreateS:

; 938  : 	thread_name[PsGetThreadPtr(test_handle[8])->thread_id] = "LOW2 THREAD";

  00478	8b 45 e4	 mov	 eax, DWORD PTR _test_handle$[ebp+32]
  0047b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0047e	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@GJEPCFAM@LOW2?5THREAD?$AA@

; 939  : 	PsSetThreadStatus(test_handle[8], THREAD_STATUS_READY);

  00489	6a 02		 push	 2
  0048b	8b 45 e4	 mov	 eax, DWORD PTR _test_handle$[ebp+32]
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 _PsSetThreadStatus
  00494	83 c4 08	 add	 esp, 8

; 940  : 
; 941  : 	// ☞ 테스트 LOW 시스템 스레드 3 생성
; 942  : 	if( !PsCreateThread(&test_handle[9], process_handle, PspLowPriorityThread, NULL, DEFAULT_STACK_SIZE, FALSE, LOW) )

  00497	6a 00		 push	 0
  00499	6a 00		 push	 0
  0049b	68 00 00 01 00	 push	 65536			; 00010000H
  004a0	6a 00		 push	 0
  004a2	68 00 00 00 00	 push	 OFFSET _PspLowPriorityThread
  004a7	8b 45 fc	 mov	 eax, DWORD PTR _process_handle$[ebp]
  004aa	50		 push	 eax
  004ab	8d 4d e8	 lea	 ecx, DWORD PTR _test_handle$[ebp+36]
  004ae	51		 push	 ecx
  004af	e8 00 00 00 00	 call	 _PsCreateThread
  004b4	83 c4 1c	 add	 esp, 28			; 0000001cH
  004b7	85 c0		 test	 eax, eax
  004b9	75 04		 jne	 SHORT $LN1@PspCreateS

; 943  : 		return FALSE;

  004bb	33 c0		 xor	 eax, eax
  004bd	eb 24		 jmp	 SHORT $LN18@PspCreateS
$LN1@PspCreateS:

; 944  : 	thread_name[PsGetThreadPtr(test_handle[9])->thread_id] = "LOW3 THREAD";

  004bf	8b 45 e8	 mov	 eax, DWORD PTR _test_handle$[ebp+36]
  004c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004c5	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _thread_name[ecx*4], OFFSET ??_C@_0M@HODEDBEP@LOW3?5THREAD?$AA@

; 945  : 	PsSetThreadStatus(test_handle[9], THREAD_STATUS_READY);

  004d0	6a 02		 push	 2
  004d2	8b 45 e8	 mov	 eax, DWORD PTR _test_handle$[ebp+36]
  004d5	50		 push	 eax
  004d6	e8 00 00 00 00	 call	 _PsSetThreadStatus
  004db	83 c4 08	 add	 esp, 8

; 946  : 
; 947  : 	return TRUE;

  004de	b8 01 00 00 00	 mov	 eax, 1
$LN18@PspCreateS:

; 948  : }

  004e3	5f		 pop	 edi
  004e4	5e		 pop	 esi
  004e5	5b		 pop	 ebx
  004e6	8b e5		 mov	 esp, ebp
  004e8	5d		 pop	 ebp
  004e9	c3		 ret	 0
_PspCreateSystemProcess ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspMidPriorityThread
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_PspMidPriorityThread PROC				; COMDAT

; 598  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@PspMidPrio@2:

; 599  : 	while( TRUE )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	74 07		 je	 SHORT $LN1@PspMidPrio@2

; 600  : 		HalTaskSwitch();

  00012	e8 00 00 00 00	 call	 _HalTaskSwitch
  00017	eb f0		 jmp	 SHORT $LN2@PspMidPrio@2
$LN1@PspMidPrio@2:

; 601  : 
; 602  : 	return 0;

  00019	33 c0		 xor	 eax, eax

; 603  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_PspMidPriorityThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspLowPriorityThread
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_PspLowPriorityThread PROC				; COMDAT

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@PspLowPrio@2:

; 608  : 	while( TRUE )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	74 07		 je	 SHORT $LN1@PspLowPrio@2

; 609  : 		HalTaskSwitch();

  00012	e8 00 00 00 00	 call	 _HalTaskSwitch
  00017	eb f0		 jmp	 SHORT $LN2@PspLowPrio@2
$LN1@PspLowPrio@2:

; 610  : 
; 611  : 	return 0;

  00019	33 c0		 xor	 eax, eax

; 612  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_PspLowPriorityThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspIdleThread
_TEXT	SEGMENT
_StartContext$ = 8					; size = 4
_PspIdleThread PROC					; COMDAT

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@PspIdleThr:

; 618  : 	while( TRUE )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	74 07		 je	 SHORT $LN1@PspIdleThr

; 619  : 		HalTaskSwitch();

  00012	e8 00 00 00 00	 call	 _HalTaskSwitch
  00017	eb f0		 jmp	 SHORT $LN2@PspIdleThr
$LN1@PspIdleThr:

; 620  : 
; 621  : 	return 0;

  00019	33 c0		 xor	 eax, eax

; 622  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_PspIdleThread ENDP
_TEXT	ENDS
EXTRN	_MmFreeNonCachedMemory:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _PspProcessCutterThread
_TEXT	SEGMENT
_pt_cur_thread$ = -16					; size = 4
_pt_cur_process$ = -12					; size = 4
_pt_prev_process$ = -8					; size = 4
_ProcessHandle$ = -4					; size = 4
_StartContext$ = 8					; size = 4
_PspProcessCutterThread PROC				; COMDAT

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN13@PspProcess:

; 627  : 	HANDLE ProcessHandle;
; 628  : 	PPROCESS_CONTROL_BLOCK	*pt_prev_process, *pt_cur_process;
; 629  : 	PTHREAD_CONTROL_BLOCK	*pt_cur_thread;
; 630  : 
; 631  : 	while( 1 )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	0f 84 59 01 00
	00		 je	 $LN12@PspProcess

; 632  : 	{
; 633  : 		// 프로세스의 cutting 리스트 확인
; 634  : 		if( !PspPopCuttingItem(&m_ProcessCuttingList, &ProcessHandle) )

  00016	8d 45 fc	 lea	 eax, DWORD PTR _ProcessHandle$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _m_ProcessCuttingList
  0001f	e8 00 00 00 00	 call	 _PspPopCuttingItem
  00024	83 c4 08	 add	 esp, 8
  00027	85 c0		 test	 eax, eax
  00029	75 07		 jne	 SHORT $LN11@PspProcess

; 635  : 		{
; 636  : 			HalTaskSwitch();

  0002b	e8 00 00 00 00	 call	 _HalTaskSwitch

; 637  : 			continue;

  00030	eb d7		 jmp	 SHORT $LN13@PspProcess
$LN11@PspProcess:

; 638  : 		}
; 639  : 
; 640  : ENTER_CRITICAL_SECTION();

  00032	9c		 pushfd
  00033	fa		 cli

; 641  : 		// 삭제할 프로세스가 시스템 프로세스 인지 확인
; 642  : 		if( ProcessHandle == PsGetThreadPtr(PsGetCurrentThread())->parent_process_handle )

  00034	e8 00 00 00 00	 call	 _PsGetCurrentThread
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  0003c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003e	75 05		 jne	 SHORT $LN10@PspProcess

; 643  : 		{
; 644  : 			goto $exit;

  00040	e9 24 01 00 00	 jmp	 $$exit$1210
$LN10@PspProcess:

; 645  : 		}
; 646  : 
; 647  : 		pt_prev_process = pt_cur_process = &(m_ProcMgrBlk.pt_head_process);

  00045	c7 45 f4 18 00
	00 00		 mov	 DWORD PTR _pt_cur_process$[ebp], OFFSET _m_ProcMgrBlk+24
  0004c	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  0004f	89 45 f8	 mov	 DWORD PTR _pt_prev_process$[ebp], eax
$LN9@PspProcess:

; 648  : 
; 649  : 		while( *pt_cur_process != PsGetProcessPtr(ProcessHandle))

  00052	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	3b 4d fc	 cmp	 ecx, DWORD PTR _ProcessHandle$[ebp]
  0005a	74 23		 je	 SHORT $LN8@PspProcess

; 650  : 		{
; 651  : 			// 리스트 내에서 현재 프로세스가 마지막 리스트 프로세스일 경우에 종료
; 652  : 			if( (*pt_cur_process)->pt_next_process == NULL )

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00065	75 05		 jne	 SHORT $LN7@PspProcess

; 653  : 			{
; 654  : 				goto $exit;

  00067	e9 fd 00 00 00	 jmp	 $$exit$1210
$LN7@PspProcess:

; 655  : 			}
; 656  : 			pt_prev_process = pt_cur_process;

  0006c	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  0006f	89 45 f8	 mov	 DWORD PTR _pt_prev_process$[ebp], eax

; 657  : 			pt_cur_process = &((*pt_cur_process)->pt_next_process);

  00072	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	83 c1 08	 add	 ecx, 8
  0007a	89 4d f4	 mov	 DWORD PTR _pt_cur_process$[ebp], ecx

; 658  : 		}

  0007d	eb d3		 jmp	 SHORT $LN9@PspProcess
$LN8@PspProcess:

; 659  : 
; 660  : 		// 다음 프로세스를 받아온다
; 661  : 		(*pt_prev_process)->pt_next_process = (*pt_cur_process)->pt_next_process;

  0007f	8b 45 f4	 mov	 eax, DWORD PTR _pt_cur_process$[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	8b 55 f8	 mov	 edx, DWORD PTR _pt_prev_process$[ebp]
  00087	8b 02		 mov	 eax, DWORD PTR [edx]
  00089	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0008c	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 662  : 		m_ProcMgrBlk.process_count--;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk
  00094	83 e8 01	 sub	 eax, 1
  00097	a3 00 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk, eax

; 663  : 
; 664  : 		// 삭제할 프로세스를 찾았다면, 해당 프로세스 내에 모든 쓰레드의 할당된 메모리 해제
; 665  : 
; 666  : 		// ☞ 멀티레벨 스레드 큐 LOW 메모리 해제
; 667  : 		pt_cur_thread = &(PsGetProcessPtr(ProcessHandle)->pt_head_thread[LOW]);

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0009f	83 c0 14	 add	 eax, 20			; 00000014H
  000a2	89 45 f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], eax
$LN6@PspProcess:

; 668  : 		while( *pt_cur_thread != NULL )

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000a8	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ab	74 2c		 je	 SHORT $LN5@PspProcess

; 669  : 		{
; 670  : 			MmFreeNonCachedMemory((PVOID)(*pt_cur_thread)->pt_stack_base_address);

  000ad	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000b5	52		 push	 edx
  000b6	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000bb	83 c4 04	 add	 esp, 4

; 671  : 			MmFreeNonCachedMemory((PVOID)(*pt_cur_thread));

  000be	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000c9	83 c4 04	 add	 esp, 4

; 672  : 			pt_cur_thread = &((*pt_cur_thread)->pt_next_thread);

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d1	83 c1 14	 add	 ecx, 20			; 00000014H
  000d4	89 4d f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], ecx

; 673  : 		}

  000d7	eb cc		 jmp	 SHORT $LN6@PspProcess
$LN5@PspProcess:

; 674  : 		// ☞ 멀티레벨 스레드 큐 MID 메모리 해제
; 675  : 		pt_cur_thread = &(PsGetProcessPtr(ProcessHandle)->pt_head_thread[MID]);

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  000dc	83 c0 18	 add	 eax, 24			; 00000018H
  000df	89 45 f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], eax
$LN4@PspProcess:

; 676  : 		while( *pt_cur_thread != NULL )

  000e2	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000e5	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e8	74 2c		 je	 SHORT $LN3@PspProcess

; 677  : 		{
; 678  : 			MmFreeNonCachedMemory((PVOID)(*pt_cur_thread)->pt_stack_base_address);

  000ea	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ef	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000f8	83 c4 04	 add	 esp, 4

; 679  : 			MmFreeNonCachedMemory((PVOID)(*pt_cur_thread));

  000fb	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  00106	83 c4 04	 add	 esp, 4

; 680  : 			pt_cur_thread = &((*pt_cur_thread)->pt_next_thread);

  00109	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  0010c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010e	83 c1 14	 add	 ecx, 20			; 00000014H
  00111	89 4d f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], ecx

; 681  : 		}

  00114	eb cc		 jmp	 SHORT $LN4@PspProcess
$LN3@PspProcess:

; 682  : 		// ☞ 멀티레벨 스레드 큐 HIGH 메모리 해제
; 683  : 		pt_cur_thread = &(PsGetProcessPtr(ProcessHandle)->pt_head_thread[HIGH]);

  00116	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00119	83 c0 1c	 add	 eax, 28			; 0000001cH
  0011c	89 45 f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], eax
$LN2@PspProcess:

; 684  : 		while( *pt_cur_thread != NULL )

  0011f	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  00122	83 38 00	 cmp	 DWORD PTR [eax], 0
  00125	74 2c		 je	 SHORT $LN1@PspProcess

; 685  : 		{
; 686  : 			MmFreeNonCachedMemory((PVOID)(*pt_cur_thread)->pt_stack_base_address);

  00127	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  0012a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  00135	83 c4 04	 add	 esp, 4

; 687  : 			MmFreeNonCachedMemory((PVOID)(*pt_cur_thread));

  00138	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  0013b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  00143	83 c4 04	 add	 esp, 4

; 688  : 			pt_cur_thread = &((*pt_cur_thread)->pt_next_thread);

  00146	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  00149	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014b	83 c1 14	 add	 ecx, 20			; 00000014H
  0014e	89 4d f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], ecx

; 689  : 		}

  00151	eb cc		 jmp	 SHORT $LN2@PspProcess
$LN1@PspProcess:

; 690  : 
; 691  : 		// ☞ 프로세스가 삭제되면 1(제거됨)으로 설정, 시험용으로 만든 프로세스가 하나이기 때문에 가능...
; 692  : 		bIsUsrProcessDead = 1;

  00153	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bIsUsrProcessDead, 1

; 693  : 		// 삭제할 프로세스 자체에 할당된 메모리도 해제
; 694  : 		MmFreeNonCachedMemory((PVOID)ProcessHandle);

  0015d	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  00166	83 c4 04	 add	 esp, 4
$$exit$1210:

; 695  : 
; 696  : $exit:
; 697  : EXIT_CRITICAL_SECTION();

  00169	9d		 popfd

; 698  : 	}

  0016a	e9 9a fe ff ff	 jmp	 $LN13@PspProcess
$LN12@PspProcess:

; 699  : 
; 700  : 	return 0;

  0016f	33 c0		 xor	 eax, eax

; 701  : }

  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	5b		 pop	 ebx
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
_PspProcessCutterThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspPopCuttingItem
_TEXT	SEGMENT
_bResult$ = -4						; size = 4
_pCuttingList$ = 8					; size = 4
_pItem$ = 12						; size = 4
_PspPopCuttingItem PROC					; COMDAT

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 376  : 	BOOL bResult = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1

; 377  : 
; 378  : ENTER_CRITICAL_SECTION();

  00010	9c		 pushfd
  00011	fa		 cli

; 379  : 
; 380  : 	{
; 381  : 		// 커터 큐에 카운트 체크
; 382  : 		if( pCuttingList->count == 0 )

  00012	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00015	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00018	85 c9		 test	 ecx, ecx
  0001a	75 09		 jne	 SHORT $LN2@PspPopCutt

; 383  : 		{
; 384  : 			bResult = FALSE;

  0001c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 0

; 385  : 			goto $exit;

  00023	eb 41		 jmp	 SHORT $$exit$1083
$LN2@PspPopCutt:

; 386  : 		}
; 387  : 
; 388  : 		// POP
; 389  : 		pCuttingList->count--;

  00025	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00028	8a 08		 mov	 cl, BYTE PTR [eax]
  0002a	80 e9 01	 sub	 cl, 1
  0002d	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  00030	88 0a		 mov	 BYTE PTR [edx], cl

; 390  : 		*pItem = pCuttingList->handle_list[pCuttingList->head++];

  00032	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00035	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00039	8b 55 0c	 mov	 edx, DWORD PTR _pItem$[ebp]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  0003f	8b 4c 88 03	 mov	 ecx, DWORD PTR [eax+ecx*4+3]
  00043	89 0a		 mov	 DWORD PTR [edx], ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _pCuttingList$[ebp]
  00048	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0004b	04 01		 add	 al, 1
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _pCuttingList$[ebp]
  00050	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 391  : 
; 392  : 		if( pCuttingList->head >= MAX_CUTTING_ITEM )

  00053	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00056	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0005a	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  0005d	7c 07		 jl	 SHORT $$exit$1083

; 393  : 			pCuttingList->head = 0;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pCuttingList$[ebp]
  00062	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$$exit$1083:

; 394  : 	}
; 395  : 
; 396  : $exit:
; 397  : EXIT_CRITICAL_SECTION();

  00066	9d		 popfd

; 398  : 
; 399  : 	return bResult;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 400  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_PspPopCuttingItem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@ONMJOFAN@TERMINATED?$AA@		; `string'
;	COMDAT ??_C@_0L@ONMJOFAN@TERMINATED?$AA@
CONST	SEGMENT
??_C@_0L@ONMJOFAN@TERMINATED?$AA@ DB 'TERMINATED', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _PspThreadCutterThread
_TEXT	SEGMENT
_pt_cur_thread$ = -16					; size = 4
_pt_prev_thread$ = -12					; size = 4
_ThreadHandle$ = -8					; size = 4
_ProcessHandle$ = -4					; size = 4
_StartContext$ = 8					; size = 4
_PspThreadCutterThread PROC				; COMDAT

; 706  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN12@PspThreadC:

; 707  : 	HANDLE ProcessHandle, ThreadHandle;
; 708  : 	PTHREAD_CONTROL_BLOCK *pt_prev_thread, *pt_cur_thread;
; 709  : 
; 710  : 	while( TRUE )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	0f 84 15 01 00
	00		 je	 $LN13@PspThreadC

; 711  : 	{
; 712  : 		// Thread의 Cutting 리스트 확인
; 713  : 		if( !PspPopCuttingItem(&m_ThreadCuttingList, &ThreadHandle) )

  00016	8d 45 f8	 lea	 eax, DWORD PTR _ThreadHandle$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _m_ThreadCuttingList
  0001f	e8 00 00 00 00	 call	 _PspPopCuttingItem
  00024	83 c4 08	 add	 esp, 8
  00027	85 c0		 test	 eax, eax
  00029	75 07		 jne	 SHORT $LN10@PspThreadC

; 714  : 		{
; 715  : 			HalTaskSwitch();

  0002b	e8 00 00 00 00	 call	 _HalTaskSwitch

; 716  : 			continue;

  00030	eb d7		 jmp	 SHORT $LN12@PspThreadC
$LN10@PspThreadC:

; 717  : 		}
; 718  : 
; 719  : ENTER_CRITICAL_SECTION();

  00032	9c		 pushfd
  00033	fa		 cli

; 720  : 
; 721  : 		ProcessHandle = PsGetThreadPtr(ThreadHandle)->parent_process_handle;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d fc	 mov	 DWORD PTR _ProcessHandle$[ebp], ecx

; 722  : 
; 723  : 		// 삭제할 쓰레드가 속해있는 프로세스가 시스템 프로세스인지 확인
; 724  : 		if( ProcessHandle == PsGetThreadPtr(PsGetCurrentThread())->parent_process_handle )

  0003c	e8 00 00 00 00	 call	 _PsGetCurrentThread
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _ProcessHandle$[ebp]
  00044	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00046	75 05		 jne	 SHORT $LN9@PspThreadC

; 725  : 			goto $exit;

  00048	e9 d8 00 00 00	 jmp	 $$exit$1250
$LN9@PspThreadC:

; 726  : 
; 727  : 		if( PsGetProcessPtr(ProcessHandle)->thread_count == 0 )

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00050	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00054	75 07		 jne	 SHORT $LN8@PspThreadC
  00056	e9 ca 00 00 00	 jmp	 $$exit$1250

; 728  : 			goto $exit;

  0005b	eb 7e		 jmp	 SHORT $LN7@PspThreadC
$LN8@PspThreadC:

; 729  : 		// 속해있는 프로세스 내에서 한 개의 쓰레드만 존재할 경우
; 730  : 		else if( PsGetProcessPtr(ProcessHandle)->thread_count == 1 )

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00060	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00064	75 22		 jne	 SHORT $LN6@PspThreadC

; 731  : 		{
; 732  : 			PsGetProcessPtr(ProcessHandle)->pt_head_thread[PsGetThreadPtr(ThreadHandle)->priority] = NULL;

  00066	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  00069	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  00072	c7 44 8a 14 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+20], 0

; 733  : 			// ☞ 프로세스의 마지막 스레드가 삭제되면, 프로세스를 삭제시키기 위해 추가(프로세스가 삭제되는 것을 보이기 위해 추가)
; 734  : 			PsDeleteProcess(ProcessHandle);

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _PsDeleteProcess
  00083	83 c4 04	 add	 esp, 4

; 735  : 		}
; 736  : 		else

  00086	eb 53		 jmp	 SHORT $LN7@PspThreadC
$LN6@PspThreadC:

; 737  : 		{
; 738  : 			pt_prev_thread = pt_cur_thread = &(PsGetProcessPtr(ProcessHandle)->pt_head_thread[PsGetThreadPtr(ThreadHandle)->priority]);	// ☞지울 스레드의 우선순위 큐를 사용

  00088	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0008b	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00091	8b 55 fc	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  00094	8d 44 8a 14	 lea	 eax, DWORD PTR [edx+ecx*4+20]
  00098	89 45 f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], eax
  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _pt_cur_thread$[ebp]
  0009e	89 4d f4	 mov	 DWORD PTR _pt_prev_thread$[ebp], ecx
$LN4@PspThreadC:

; 739  : 			
; 740  : 			while( *pt_cur_thread != PsGetThreadPtr(ThreadHandle) )

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	3b 4d f8	 cmp	 ecx, DWORD PTR _ThreadHandle$[ebp]
  000a9	74 20		 je	 SHORT $LN3@PspThreadC

; 741  : 			{
; 742  : 				if( (*pt_cur_thread)->pt_next_thread == NULL )

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  000b4	75 02		 jne	 SHORT $LN2@PspThreadC

; 743  : 					goto $exit;

  000b6	eb 6d		 jmp	 SHORT $$exit$1250
$LN2@PspThreadC:

; 744  : 				pt_prev_thread = pt_cur_thread;

  000b8	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000bb	89 45 f4	 mov	 DWORD PTR _pt_prev_thread$[ebp], eax

; 745  : 				pt_cur_thread = &((*pt_cur_thread)->pt_next_thread);

  000be	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	83 c1 14	 add	 ecx, 20			; 00000014H
  000c6	89 4d f0	 mov	 DWORD PTR _pt_cur_thread$[ebp], ecx

; 746  : 			}

  000c9	eb d6		 jmp	 SHORT $LN4@PspThreadC
$LN3@PspThreadC:

; 747  : 
; 748  : 			// 리스트의 다음 쓰레드의 포인터를 가져온다
; 749  : 			(*pt_prev_thread)->pt_next_thread = (*pt_cur_thread)->pt_next_thread;

  000cb	8b 45 f0	 mov	 eax, DWORD PTR _pt_cur_thread$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	8b 55 f4	 mov	 edx, DWORD PTR _pt_prev_thread$[ebp]
  000d3	8b 02		 mov	 eax, DWORD PTR [edx]
  000d5	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  000d8	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN7@PspThreadC:

; 750  : 		}
; 751  : 
; 752  : 		if( PsGetThreadPtr(ThreadHandle)->pt_stack_base_address >= (int *)0x00200000 )

  000db	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000de	81 78 20 00 00
	20 00		 cmp	 DWORD PTR [eax+32], 2097152 ; 00200000H
  000e5	72 0f		 jb	 SHORT $LN1@PspThreadC

; 753  : 			MmFreeNonCachedMemory((PVOID)(PsGetThreadPtr(ThreadHandle)->pt_stack_base_address)); // 스택 영역 할당 해제

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000ea	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000ed	51		 push	 ecx
  000ee	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  000f3	83 c4 04	 add	 esp, 4
$LN1@PspThreadC:

; 754  : 		
; 755  : 		// ☞ 스레드가 삭제되면 3번 째 줄에 각 스레드의 이름을 "TERMINATED" 로 변경
; 756  : 		usr_thr_name[PsGetThreadPtr(ThreadHandle)->priority] = "TERMINATED";

  000f6	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  000f9	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000ff	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _usr_thr_name[ecx*4], OFFSET ??_C@_0L@ONMJOFAN@TERMINATED?$AA@

; 757  : 
; 758  : 		MmFreeNonCachedMemory((PVOID)(PsGetThreadPtr(ThreadHandle))); // 쓰레드 자체 할당 해제

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _ThreadHandle$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _MmFreeNonCachedMemory
  00113	83 c4 04	 add	 esp, 4

; 759  : 
; 760  : 		PsGetProcessPtr(ProcessHandle)->thread_count--;

  00116	8b 45 fc	 mov	 eax, DWORD PTR _ProcessHandle$[ebp]
  00119	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0011c	83 e9 01	 sub	 ecx, 1
  0011f	8b 55 fc	 mov	 edx, DWORD PTR _ProcessHandle$[ebp]
  00122	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$$exit$1250:

; 761  : $exit:
; 762  : EXIT_CRITICAL_SECTION();

  00125	9d		 popfd

; 763  : 	}

  00126	e9 de fe ff ff	 jmp	 $LN12@PspThreadC
$LN13@PspThreadC:

; 764  : }

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_PspThreadCutterThread ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspSoftTaskSW
_TEXT	SEGMENT
_status$ = -20						; size = 8
_addr$ = -12						; size = 4
_pos$ = -8						; size = 4
_cnt$ = -4						; size = 4
_StartContext$ = 8					; size = 4
_PspSoftTaskSW PROC					; COMDAT

; 768  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 769  : 	int cnt = 0, pos = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cnt$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0

; 770  : 	char *addr = (char *)TS_WATCHDOG_CLOCK_POS, status[] = {'-', '\\', '|', '/', '-', '\\', '|', '/'};

  00017	c7 45 f4 9e 80
	0b 00		 mov	 DWORD PTR _addr$[ebp], 753822 ; 000b809eH
  0001e	c6 45 ec 2d	 mov	 BYTE PTR _status$[ebp], 45 ; 0000002dH
  00022	c6 45 ed 5c	 mov	 BYTE PTR _status$[ebp+1], 92 ; 0000005cH
  00026	c6 45 ee 7c	 mov	 BYTE PTR _status$[ebp+2], 124 ; 0000007cH
  0002a	c6 45 ef 2f	 mov	 BYTE PTR _status$[ebp+3], 47 ; 0000002fH
  0002e	c6 45 f0 2d	 mov	 BYTE PTR _status$[ebp+4], 45 ; 0000002dH
  00032	c6 45 f1 5c	 mov	 BYTE PTR _status$[ebp+5], 92 ; 0000005cH
  00036	c6 45 f2 7c	 mov	 BYTE PTR _status$[ebp+6], 124 ; 0000007cH
  0003a	c6 45 f3 2f	 mov	 BYTE PTR _status$[ebp+7], 47 ; 0000002fH
$LN5@PspSoftTas:

; 771  : 	
; 772  : 	// DbgPrint("PspSoftTaskSW START\r\n");
; 773  : 
; 774  : 	while( TRUE )

  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 4c		 je	 SHORT $LN4@PspSoftTas

; 775  : 	{
; 776  : 		_asm cli

  00047	fa		 cli

; 777  : 
; 778  : 		// 실행화면에 바람개비 모양이 회전하는 모습을 표시
; 779  : 		if( cnt++ >= TIMEOUT_PER_SECOND )

  00048	8b 45 fc	 mov	 eax, DWORD PTR _cnt$[ebp]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _cnt$[ebp]
  0004e	83 c1 01	 add	 ecx, 1
  00051	89 4d fc	 mov	 DWORD PTR _cnt$[ebp], ecx
  00054	83 f8 32	 cmp	 eax, 50			; 00000032H
  00057	7c 32		 jl	 SHORT $LN3@PspSoftTas

; 780  : 		{
; 781  : 			if( ++pos > 7 )

  00059	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  0005c	83 c0 01	 add	 eax, 1
  0005f	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax
  00062	83 7d f8 07	 cmp	 DWORD PTR _pos$[ebp], 7
  00066	7e 07		 jle	 SHORT $LN2@PspSoftTas

; 782  : 				pos = 0;

  00068	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
$LN2@PspSoftTas:

; 783  : 			cnt = 0;

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cnt$[ebp], 0

; 784  : 			if( m_bShowTSWatchdogClock )

  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _m_bShowTSWatchdogClock, 0
  0007d	74 0c		 je	 SHORT $LN3@PspSoftTas

; 785  : 				*addr = status[pos];

  0007f	8b 45 f4	 mov	 eax, DWORD PTR _addr$[ebp]
  00082	8b 4d f8	 mov	 ecx, DWORD PTR _pos$[ebp]
  00085	8a 54 0d ec	 mov	 dl, BYTE PTR _status$[ebp+ecx]
  00089	88 10		 mov	 BYTE PTR [eax], dl
$LN3@PspSoftTas:

; 786  : 
; 787  : 			//DbgPrint("IT'S WINDY\r\n");
; 788  : 		}
; 789  : 
; 790  : 		// 태스크 스위칭 함수 호출
; 791  : 		PspSetupTaskSWEnv();

  0008b	e8 00 00 00 00	 call	 _PspSetupTaskSWEnv

; 792  : 		// 인터럽트 처리시에 모든 처리를 완료하고 다시 태스크로 복귀
; 793  : 		_asm iretd

  00090	cf		 iretd

; 794  : 	}

  00091	eb ab		 jmp	 SHORT $LN5@PspSoftTas
$LN4@PspSoftTas:

; 795  : 
; 796  : 	return 0;

  00093	33 c0		 xor	 eax, eax

; 797  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_PspSoftTaskSW ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspSetupTaskSWEnv
_TEXT	SEGMENT
_next_thread$ = -8					; size = 4
_current_thread$ = -4					; size = 4
_PspSetupTaskSWEnv PROC					; COMDAT

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 566  : 	HANDLE current_thread, next_thread;
; 567  : 
; 568  : 	// 현재 실행되고 있는 쓰레드를 가져옴
; 569  : 	current_thread = PsGetCurrentThread();

  00009	e8 00 00 00 00	 call	 _PsGetCurrentThread
  0000e	89 45 fc	 mov	 DWORD PTR _current_thread$[ebp], eax

; 570  : 
; 571  : 	// 다음 실행 가능한 쓰레드를 찾는다
; 572  : 	next_thread = PspFindNextThreadScheduled(); // At this time, current thread is changed with new thing

  00011	e8 00 00 00 00	 call	 _PspFindNextThreadScheduled
  00016	89 45 f8	 mov	 DWORD PTR _next_thread$[ebp], eax

; 573  : 
; 574  : 	if( ++current_priority_num >= 20 )	// ☞ 어떤 우선순위 큐에서 스레드를 갖어올지 판단 기준이 되는 변수를 증가

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _current_priority_num
  0001e	83 c0 01	 add	 eax, 1
  00021	a3 00 00 00 00	 mov	 DWORD PTR _current_priority_num, eax
  00026	83 3d 00 00 00
	00 14		 cmp	 DWORD PTR _current_priority_num, 20 ; 00000014H
  0002d	7c 0a		 jl	 SHORT $LN6@PspSetupTa

; 575  : 		current_priority_num = 0;		// ☞ 0~11 : HIGH, 12~17 : MID, 18~19 : LOW

  0002f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _current_priority_num, 0
$LN6@PspSetupTa:

; 576  : 
; 577  : 	// 현재 쓰레드의 상태를 확인하여 THREAD_STATUS_TERMINATED(종료) 상태일 경우, 스레드 제거
; 578  : 	if( PsGetThreadPtr(current_thread)->thread_status == THREAD_STATUS_TERMINATED )

  00039	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0003c	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00040	75 17		 jne	 SHORT $LN5@PspSetupTa

; 579  : 	{
; 580  : 		// Auto Delete?
; 581  : 		if( PsGetThreadPtr(current_thread)->auto_delete )

  00042	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  00045	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00049	74 0c		 je	 SHORT $LN4@PspSetupTa

; 582  : 			PsDeleteThread(current_thread);

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _PsDeleteThread
  00054	83 c4 04	 add	 esp, 4
$LN4@PspSetupTa:

; 583  : 	}
; 584  : 	// THREAD_STATUS_RUNNING(실행중) 상태일 경우, 다음 스케줄링 될 때 재개될 수 있도록 THREAD_STATUS_READY(실행대기) 상태로 변경
; 585  : 	else if( PsGetThreadPtr(current_thread)->thread_status == THREAD_STATUS_RUNNING )

  00057	eb 13		 jmp	 SHORT $LN3@PspSetupTa
$LN5@PspSetupTa:
  00059	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0005c	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  00060	75 0a		 jne	 SHORT $LN3@PspSetupTa

; 586  : 		PsGetThreadPtr(current_thread)->thread_status = THREAD_STATUS_READY;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  00065	c7 40 0c 02 00
	00 00		 mov	 DWORD PTR [eax+12], 2
$LN3@PspSetupTa:

; 587  : 
; 588  : 	// 태스크 스위칭
; 589  : 	if( current_thread != next_thread && next_thread != NULL )

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0006f	3b 45 f8	 cmp	 eax, DWORD PTR _next_thread$[ebp]
  00072	74 25		 je	 SHORT $LN7@PspSetupTa
  00074	83 7d f8 00	 cmp	 DWORD PTR _next_thread$[ebp], 0
  00078	74 1f		 je	 SHORT $LN7@PspSetupTa

; 590  : 	{
; 591  : 		HalWriteTssIntoGdt(&PsGetThreadPtr(next_thread)->thread_tss32, sizeof(TSS_32), TASK_SW_SEG, TRUE);

  0007a	6a 01		 push	 1
  0007c	6a 28		 push	 40			; 00000028H
  0007e	6a 68		 push	 104			; 00000068H
  00080	8b 45 f8	 mov	 eax, DWORD PTR _next_thread$[ebp]
  00083	83 c0 28	 add	 eax, 40			; 00000028H
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _HalWriteTssIntoGdt
  0008c	83 c4 10	 add	 esp, 16			; 00000010H

; 592  : 		PsGetThreadPtr(next_thread)->thread_status = THREAD_STATUS_RUNNING;

  0008f	8b 45 f8	 mov	 eax, DWORD PTR _next_thread$[ebp]
  00092	c7 40 0c 04 00
	00 00		 mov	 DWORD PTR [eax+12], 4
$LN7@PspSetupTa:

; 593  : 	}
; 594  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_PspSetupTaskSWEnv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@JPHHIFMF@Currnt_Priority_Num?5?3?5?$CF00d?0?5Thre@ ; `string'
PUBLIC	??_C@_0CC@BFKFDEEB@?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?$AN@ ; `string'
PUBLIC	??_C@_0EJ@MGKGHIFN@All?5Thread?5Are?5Terminated?5?0?5The?5@ ; `string'
EXTRN	_CrtPrintfXY:PROC
;	COMDAT ??_C@_0CP@JPHHIFMF@Currnt_Priority_Num?5?3?5?$CF00d?0?5Thre@
CONST	SEGMENT
??_C@_0CP@JPHHIFMF@Currnt_Priority_Num?5?3?5?$CF00d?0?5Thre@ DB 'Currnt_P'
	DB	'riority_Num : %00d, Thread Name : %s', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BFKFDEEB@?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?$AN@
CONST	SEGMENT
??_C@_0CC@BFKFDEEB@?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?$AN@ DB '%'
	DB	's : %00x, %s : %00x, %s : %00x', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MGKGHIFN@All?5Thread?5Are?5Terminated?5?0?5The?5@
CONST	SEGMENT
??_C@_0EJ@MGKGHIFN@All?5Thread?5Are?5Terminated?5?0?5The?5@ DB 'All Threa'
	DB	'd Are Terminated , The User Process Including Them is Removed'
	DB	0dH, 0aH, 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _PspFindNextThreadScheduled
_TEXT	SEGMENT
_pt_process$ = -20					; size = 4
_pt_tmp_thread$ = -16					; size = 4
_pt_thread$ = -12					; size = 4
_nextPriority$ = -8					; size = 4
_i$ = -4						; size = 4
_PspFindNextThreadScheduled PROC			; COMDAT

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 493  : 	int i;
; 494  : 
; 495  : 	THREAD_PRIORITY			nextPriority;
; 496  : 	PTHREAD_CONTROL_BLOCK	pt_thread, pt_tmp_thread;
; 497  : 	PPROCESS_CONTROL_BLOCK	pt_process;
; 498  : 
; 499  : 	if( m_ProcMgrBlk.process_count == 0 || m_ProcMgrBlk.pt_current_thread == NULL || m_ProcMgrBlk.pt_head_process == NULL )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _m_ProcMgrBlk, 0
  00010	74 12		 je	 SHORT $LN17@PspFindNex
  00012	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR _m_ProcMgrBlk+8, 0
  00019	74 09		 je	 SHORT $LN17@PspFindNex
  0001b	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR _m_ProcMgrBlk+24, 0
  00022	75 07		 jne	 SHORT $LN18@PspFindNex
$LN17@PspFindNex:

; 500  : 		return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	e9 79 01 00 00	 jmp	 $LN19@PspFindNex
$LN18@PspFindNex:

; 501  : 
; 502  : 	nextPriority	= GetNextRunPriority();				// ☞ 다음 실행될 스레드들이 속한 우선순위 값

  0002b	e8 00 00 00 00	 call	 _GetNextRunPriority
  00030	89 45 f8	 mov	 DWORD PTR _nextPriority$[ebp], eax

; 503  : 	pt_thread		= m_ProcMgrBlk.pt_current_thread;

  00033	a1 08 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+8
  00038	89 45 f4	 mov	 DWORD PTR _pt_thread$[ebp], eax

; 504  : 	
; 505  : 	if( pt_thread->priority != nextPriority)			// ☞ 현재 스레드가 다음 실행될 우선순위에 속하는지 확인

  0003b	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  0003e	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00044	3b 4d f8	 cmp	 ecx, DWORD PTR _nextPriority$[ebp]
  00047	74 36		 je	 SHORT $$find_thread$1137

; 506  : 	{
; 507  : 		// ☞ 현재 스레드가 다음 실행될 우선순위에 속하지 않는다면, m_ProcMgrBlk.pt_last_thread에 현재 스레드를 저장해주고,
; 508  : 		m_ProcMgrBlk.pt_last_thread[pt_thread->priority] = pt_thread;

  00049	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  0004c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00052	8b 55 f4	 mov	 edx, DWORD PTR _pt_thread$[ebp]
  00055	89 14 8d 0c 00
	00 00		 mov	 DWORD PTR _m_ProcMgrBlk[ecx*4+12], edx

; 509  : 		// ☞ 다음 실행될 우선순위의 스레드 중 마지막에 실행된 스레드를 가져온다.
; 510  : 		pt_tmp_thread = m_ProcMgrBlk.pt_last_thread[nextPriority];

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _nextPriority$[ebp]
  0005f	8b 0c 85 0c 00
	00 00		 mov	 ecx, DWORD PTR _m_ProcMgrBlk[eax*4+12]
  00066	89 4d f0	 mov	 DWORD PTR _pt_tmp_thread$[ebp], ecx

; 511  : 
; 512  : 		if( pt_tmp_thread )

  00069	83 7d f0 00	 cmp	 DWORD PTR _pt_tmp_thread$[ebp], 0
  0006d	74 08		 je	 SHORT $LN15@PspFindNex

; 513  : 			pt_thread = pt_tmp_thread;

  0006f	8b 45 f0	 mov	 eax, DWORD PTR _pt_tmp_thread$[ebp]
  00072	89 45 f4	 mov	 DWORD PTR _pt_thread$[ebp], eax

; 514  : 		else

  00075	eb 08		 jmp	 SHORT $$find_thread$1137
$LN15@PspFindNex:

; 515  : 			pt_thread = m_ProcMgrBlk.pt_last_thread[HIGH];

  00077	a1 14 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+20
  0007c	89 45 f4	 mov	 DWORD PTR _pt_thread$[ebp], eax
$$find_thread$1137:

; 516  : 	}
; 517  : 
; 518  : $find_thread:
; 519  : 	if(	pt_thread && pt_thread->pt_next_thread != NULL )

  0007f	83 7d f4 00	 cmp	 DWORD PTR _pt_thread$[ebp], 0
  00083	74 14		 je	 SHORT $LN11@PspFindNex
  00085	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  00088	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0008c	74 0b		 je	 SHORT $LN11@PspFindNex

; 520  : 		pt_thread = pt_thread->pt_next_thread;

  0008e	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  00091	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00094	89 4d f4	 mov	 DWORD PTR _pt_thread$[ebp], ecx

; 521  : 	else

  00097	eb 4d		 jmp	 SHORT $LN12@PspFindNex
$LN11@PspFindNex:

; 522  : 	{
; 523  : 		while(1)

  00099	b8 01 00 00 00	 mov	 eax, 1
  0009e	85 c0		 test	 eax, eax
  000a0	74 44		 je	 SHORT $LN12@PspFindNex

; 524  : 		{
; 525  : 			pt_process = PsGetProcessPtr(pt_thread->parent_process_handle)->pt_next_process;

  000a2	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000aa	89 55 ec	 mov	 DWORD PTR _pt_process$[ebp], edx
$$find_process$1144:

; 526  : $find_process:
; 527  : 			if( pt_process == NULL )

  000ad	83 7d ec 00	 cmp	 DWORD PTR _pt_process$[ebp], 0
  000b1	75 08		 jne	 SHORT $LN9@PspFindNex

; 528  : 				pt_process = m_ProcMgrBlk.pt_head_process;

  000b3	a1 18 00 00 00	 mov	 eax, DWORD PTR _m_ProcMgrBlk+24
  000b8	89 45 ec	 mov	 DWORD PTR _pt_process$[ebp], eax
$LN9@PspFindNex:

; 529  : 			if( pt_process->pt_head_thread[nextPriority] == NULL )

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _nextPriority$[ebp]
  000be	8b 4d ec	 mov	 ecx, DWORD PTR _pt_process$[ebp]
  000c1	83 7c 81 14 00	 cmp	 DWORD PTR [ecx+eax*4+20], 0
  000c6	75 0d		 jne	 SHORT $LN8@PspFindNex

; 530  : 			{
; 531  : 				pt_process = pt_process->pt_next_process;

  000c8	8b 45 ec	 mov	 eax, DWORD PTR _pt_process$[ebp]
  000cb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ce	89 4d ec	 mov	 DWORD PTR _pt_process$[ebp], ecx

; 532  : 				goto $find_process;

  000d1	eb da		 jmp	 SHORT $$find_process$1144

; 533  : 			}
; 534  : 			else

  000d3	eb 0f		 jmp	 SHORT $LN7@PspFindNex
$LN8@PspFindNex:

; 535  : 			{
; 536  : 				pt_thread = pt_process->pt_head_thread[nextPriority];

  000d5	8b 45 f8	 mov	 eax, DWORD PTR _nextPriority$[ebp]
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _pt_process$[ebp]
  000db	8b 54 81 14	 mov	 edx, DWORD PTR [ecx+eax*4+20]
  000df	89 55 f4	 mov	 DWORD PTR _pt_thread$[ebp], edx

; 537  : 				break;

  000e2	eb 02		 jmp	 SHORT $LN12@PspFindNex
$LN7@PspFindNex:

; 538  : 			}
; 539  : 		}

  000e4	eb b3		 jmp	 SHORT $LN11@PspFindNex
$LN12@PspFindNex:

; 540  : 	}
; 541  : 	
; 542  : 	if( pt_thread->thread_status != THREAD_STATUS_READY && pt_thread->thread_status != THREAD_STATUS_RUNNING )

  000e6	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000e9	83 78 0c 02	 cmp	 DWORD PTR [eax+12], 2
  000ed	74 0b		 je	 SHORT $LN6@PspFindNex
  000ef	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000f2	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  000f6	74 02		 je	 SHORT $LN6@PspFindNex

; 543  : 		goto $find_thread;

  000f8	eb 85		 jmp	 SHORT $$find_thread$1137
$LN6@PspFindNex:

; 544  : 
; 545  : 	m_ProcMgrBlk.pt_current_thread = pt_thread;

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  000fd	a3 08 00 00 00	 mov	 DWORD PTR _m_ProcMgrBlk+8, eax

; 546  : 
; 547  : 	// ☞ 유저 프로세스가 삭제되었음을 표시
; 548  : 	if( bIsUsrProcessDead )

  00102	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bIsUsrProcessDead, 0
  00109	74 13		 je	 SHORT $LN5@PspFindNex

; 549  : 		CrtPrintfXY(0, 3, "All Thread Are Terminated , The User Process Including Them is Removed\r\n");

  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@MGKGHIFN@All?5Thread?5Are?5Terminated?5?0?5The?5@
  00110	6a 03		 push	 3
  00112	6a 00		 push	 0
  00114	e8 00 00 00 00	 call	 _CrtPrintfXY
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH

; 550  : 	// ☞ 유저 프로세스가 살아있을 때에는 (낮은, 중간, 높은 우선순위 3개)스레드들의 실행된 횟수 및, 스레드 종료 여부 표시
; 551  : 	else

  0011c	eb 39		 jmp	 SHORT $LN4@PspFindNex
$LN5@PspFindNex:

; 552  : 		CrtPrintfXY(0, 3, "%s : %00x, %s : %00x, %s : %00x\r\n", usr_thr_name[LOW], gTestNum[LOW], usr_thr_name[MID], gTestNum[MID], usr_thr_name[HIGH], gTestNum[HIGH]);

  0011e	a1 08 00 00 00	 mov	 eax, DWORD PTR _gTestNum+8
  00123	50		 push	 eax
  00124	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _usr_thr_name+8
  0012a	51		 push	 ecx
  0012b	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _gTestNum+4
  00131	52		 push	 edx
  00132	a1 04 00 00 00	 mov	 eax, DWORD PTR _usr_thr_name+4
  00137	50		 push	 eax
  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gTestNum
  0013e	51		 push	 ecx
  0013f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _usr_thr_name
  00145	52		 push	 edx
  00146	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BFKFDEEB@?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?0?5?$CFs?5?3?5?$CF00x?$AN@
  0014b	6a 03		 push	 3
  0014d	6a 00		 push	 0
  0014f	e8 00 00 00 00	 call	 _CrtPrintfXY
  00154	83 c4 24	 add	 esp, 36			; 00000024H
$LN4@PspFindNex:

; 553  : 	
; 554  : 	// ☞ 각 Current_priority_num 일 때, 실행된 스레드 이름을 출력
; 555  : 	CrtPrintfXY(0, current_priority_num + 4, "Currnt_Priority_Num : %00d, Thread Name : %s\r\n", current_priority_num, thread_name[pt_thread->thread_id]);	

  00157	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
  0015a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _thread_name[ecx*4]
  00164	52		 push	 edx
  00165	a1 00 00 00 00	 mov	 eax, DWORD PTR _current_priority_num
  0016a	50		 push	 eax
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@JPHHIFMF@Currnt_Priority_Num?5?3?5?$CF00d?0?5Thre@
  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _current_priority_num
  00176	83 c1 04	 add	 ecx, 4
  00179	51		 push	 ecx
  0017a	6a 00		 push	 0
  0017c	e8 00 00 00 00	 call	 _CrtPrintfXY
  00181	83 c4 14	 add	 esp, 20			; 00000014H

; 556  : 	
; 557  : 	// ☞ 너무 빠르므로, 강제로 느리게 만들음
; 558  : 	for( i = 0 ; i < 500000 ; i++ );

  00184	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0018b	eb 09		 jmp	 SHORT $LN3@PspFindNex
$LN2@PspFindNex:
  0018d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00190	83 c0 01	 add	 eax, 1
  00193	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@PspFindNex:
  00196	81 7d fc 20 a1
	07 00		 cmp	 DWORD PTR _i$[ebp], 500000 ; 0007a120H
  0019d	7d 02		 jge	 SHORT $LN1@PspFindNex
  0019f	eb ec		 jmp	 SHORT $LN2@PspFindNex
$LN1@PspFindNex:

; 559  : 
; 560  : 	return (HANDLE)pt_thread;

  001a1	8b 45 f4	 mov	 eax, DWORD PTR _pt_thread$[ebp]
$LN19@PspFindNex:

; 561  : }

  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
_PspFindNextThreadScheduled ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _GetNextRunPriority
_TEXT	SEGMENT
tv67 = -68						; size = 4
_GetNextRunPriority PROC				; COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 125  : 	return current_priority_num < 12 ? HIGH : (current_priority_num < 18 ? MID : LOW);

  00009	83 3d 00 00 00
	00 0c		 cmp	 DWORD PTR _current_priority_num, 12 ; 0000000cH
  00010	7d 09		 jge	 SHORT $LN3@GetNextRun
  00012	c7 45 bc 02 00
	00 00		 mov	 DWORD PTR tv67[ebp], 2
  00019	eb 0f		 jmp	 SHORT $LN4@GetNextRun
$LN3@GetNextRun:
  0001b	33 c0		 xor	 eax, eax
  0001d	83 3d 00 00 00
	00 12		 cmp	 DWORD PTR _current_priority_num, 18 ; 00000012H
  00024	0f 9c c0	 setl	 al
  00027	89 45 bc	 mov	 DWORD PTR tv67[ebp], eax
$LN4@GetNextRun:
  0002a	8b 45 bc	 mov	 eax, DWORD PTR tv67[ebp]

; 126  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_GetNextRunPriority ENDP
_TEXT	ENDS
EXTRN	_WRITE_PORT_UCHAR:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _Psp_IRQ_SystemTimer
_TEXT	SEGMENT
_StartContxt$ = 8					; size = 4
_Psp_IRQ_SystemTimer PROC				; COMDAT

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@Psp_IRQ_Sy:

; 803  : 	// DbgPrint("Psp_IRQ_SystemTimer START\r\n");
; 804  : 
; 805  : 	while( TRUE )

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	74 22		 je	 SHORT $LN1@Psp_IRQ_Sy

; 806  : 	{
; 807  : 		_asm cli

  00012	fa		 cli

; 808  : 
; 809  : 		m_TickCount++;			// TickCount 값을 1씩 증가

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_TickCount
  00018	83 c0 01	 add	 eax, 1
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _m_TickCount, eax

; 810  : 		PspSetupTaskSWEnv();	// Task Switching

  00020	e8 00 00 00 00	 call	 _PspSetupTaskSWEnv

; 811  : 		WRITE_PORT_UCHAR((PUCHAR)0x20, 0x20);	// EOI 신호를 전송

  00025	6a 20		 push	 32			; 00000020H
  00027	6a 20		 push	 32			; 00000020H
  00029	e8 00 00 00 00	 call	 _WRITE_PORT_UCHAR
  0002e	83 c4 08	 add	 esp, 8

; 812  : 
; 813  : 		_asm iretd

  00031	cf		 iretd

; 814  : 	}

  00032	eb d5		 jmp	 SHORT $LN2@Psp_IRQ_Sy
$LN1@Psp_IRQ_Sy:

; 815  : 
; 816  : 	return 0;

  00034	33 c0		 xor	 eax, eax

; 817  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_Psp_IRQ_SystemTimer ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _PspTaskEntryPoint
_TEXT	SEGMENT
_ret_value$ = -12					; size = 4
_current_thread$ = -8					; size = 4
_start_routine$ = -4					; size = 4
_PspTaskEntryPoint PROC					; COMDAT

; 951  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 952  : 	PKSTART_ROUTINE start_routine;
; 953  : 	HANDLE current_thread;
; 954  : 	DWORD ret_value;
; 955  : 
; 956  : 	// 현재 실행되고 있는 Thread의 TCB를 가지고 옴
; 957  : 	current_thread = PsGetCurrentThread();

  00009	e8 00 00 00 00	 call	 _PsGetCurrentThread
  0000e	89 45 f8	 mov	 DWORD PTR _current_thread$[ebp], eax

; 958  : 
; 959  : 	// TCB의 start_routine 콜백 함수에 start_context 포인터를 넘겨서 콜백 함수를 호출
; 960  : 	start_routine = PsGetThreadPtr(current_thread)->start_routine;

  00011	8b 45 f8	 mov	 eax, DWORD PTR _current_thread$[ebp]
  00014	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00017	89 4d fc	 mov	 DWORD PTR _start_routine$[ebp], ecx

; 961  : 	ret_value = start_routine(PsGetThreadPtr(current_thread)->start_context);

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0001d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00020	51		 push	 ecx
  00021	ff 55 fc	 call	 DWORD PTR _start_routine$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	89 45 f4	 mov	 DWORD PTR _ret_value$[ebp], eax

; 962  : 
; 963  : 	// 쓰레드의 상태를 THREAD_STATUS_TERMINATED 설정
; 964  : 	PsGetThreadPtr(current_thread)->thread_status = THREAD_STATUS_TERMINATED;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _current_thread$[ebp]
  0002d	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 965  : 
; 966  : 	// 태스크 스위칭 함수 호출
; 967  : 	HalTaskSwitch();

  00034	e8 00 00 00 00	 call	 _HalTaskSwitch
$LN2@PspTaskEnt:

; 968  : 
; 969  : 	while( TRUE );

  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	85 c0		 test	 eax, eax
  00040	74 02		 je	 SHORT $LN3@PspTaskEnt
  00042	eb f5		 jmp	 SHORT $LN2@PspTaskEnt
$LN3@PspTaskEnt:

; 970  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_PspTaskEntryPoint ENDP
_TEXT	ENDS
END
